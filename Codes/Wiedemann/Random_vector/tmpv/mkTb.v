//
// Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
//
// On Mon May  7 04:21:12 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register initialized
  reg [31 : 0] initialized;
  wire [31 : 0] initialized$D_IN;
  wire initialized$EN;

  // register x_destination_initialized
  reg x_destination_initialized;
  wire x_destination_initialized$D_IN, x_destination_initialized$EN;

  // ports of submodule x_destination
  wire [223 : 0] x_destination$OUT;
  wire x_destination$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_display_number1, WILL_FIRE_RL_display_number2;

  // submodule x_destination
  ConstrainedRandom #(.width(32'd224),
		      .min(224'h0),
		      .max(224'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) x_destination(.RST(RST_N),
													 .CLK(CLK),
													 .EN(x_destination$EN),
													 .OUT(x_destination$OUT));

  // rule RL_display_number1
  assign WILL_FIRE_RL_display_number1 =
	     x_destination_initialized && initialized == 32'd1 ;

  // rule RL_display_number2
  assign WILL_FIRE_RL_display_number2 =
	     x_destination_initialized && initialized == 32'd2 ;

  // register initialized
  assign initialized$D_IN = initialized + 32'd1 ;
  assign initialized$EN =
	     WILL_FIRE_RL_display_number1 || initialized == 32'd0 ;

  // register x_destination_initialized
  assign x_destination_initialized$D_IN = 1'd1 ;
  assign x_destination_initialized$EN = initialized == 32'd0 ;

  // submodule x_destination
  assign x_destination$EN =
	     WILL_FIRE_RL_display_number2 || WILL_FIRE_RL_display_number1 ||
	     !x_destination_initialized ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        initialized <= `BSV_ASSIGNMENT_DELAY 32'd0;
	x_destination_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (initialized$EN)
	  initialized <= `BSV_ASSIGNMENT_DELAY initialized$D_IN;
	if (x_destination_initialized$EN)
	  x_destination_initialized <= `BSV_ASSIGNMENT_DELAY
	      x_destination_initialized$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    initialized = 32'hAAAAAAAA;
    x_destination_initialized = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_number1)
	$display("The current number is: %b", x_destination$OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_number2)
	$display("The current number is: %b", x_destination$OUT);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_display_number2) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTb

