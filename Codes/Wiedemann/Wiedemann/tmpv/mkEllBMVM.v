//
// Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
//
// On Tue May  8 03:46:11 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// get                            O   224 reg
// RDY_get                        O     1 reg
// RDY_put                        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// put_x                          I   224 reg
// EN_put                         I     1
// EN_get                         I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkEllBMVM(CLK,
		 RST_N,

		 EN_get,
		 get,
		 RDY_get,

		 put_x,
		 EN_put,
		 RDY_put);
  parameter [31 : 0] lut_num = 32'b0;
  input  CLK;
  input  RST_N;

  // actionvalue method get
  input  EN_get;
  output [223 : 0] get;
  output RDY_get;

  // action method put
  input  [223 : 0] put_x;
  input  EN_put;
  output RDY_put;

  // signals for module outputs
  wire [223 : 0] get;
  wire RDY_get, RDY_put;

  // inlined wires
  wire [72 : 0] lut_serverAdapter_outData_outData$wget;
  wire [1 : 0] lut_serverAdapter_s1_1$wget;
  wire lut_serverAdapter_cnt_1$whas,
       lut_serverAdapter_outData_enqData$whas,
       lut_serverAdapter_outData_outData$whas,
       lut_serverAdapter_s1_1$whas;

  // register in
  reg [223 : 0] in;
  wire [223 : 0] in$D_IN;
  wire in$EN;

  // register lut_serverAdapter_cnt
  reg [2 : 0] lut_serverAdapter_cnt;
  wire [2 : 0] lut_serverAdapter_cnt$D_IN;
  wire lut_serverAdapter_cnt$EN;

  // register lut_serverAdapter_s1
  reg [1 : 0] lut_serverAdapter_s1;
  wire [1 : 0] lut_serverAdapter_s1$D_IN;
  wire lut_serverAdapter_s1$EN;

  // register out
  reg [223 : 0] out;
  wire [223 : 0] out$D_IN;
  wire out$EN;

  // register row_num
  reg [7 : 0] row_num;
  reg [7 : 0] row_num$D_IN;
  wire row_num$EN;

  // register state
  reg [1 : 0] state;
  reg [1 : 0] state$D_IN;
  wire state$EN;

  // ports of submodule in_fifo
  wire [223 : 0] in_fifo$D_IN, in_fifo$D_OUT;
  wire in_fifo$CLR, in_fifo$DEQ, in_fifo$EMPTY_N, in_fifo$ENQ, in_fifo$FULL_N;

  // ports of submodule lut_memory
  wire [72 : 0] lut_memory$DI, lut_memory$DO;
  wire [7 : 0] lut_memory$ADDR;
  wire lut_memory$EN, lut_memory$WE;

  // ports of submodule lut_serverAdapter_outDataCore
  wire [72 : 0] lut_serverAdapter_outDataCore$D_IN,
		lut_serverAdapter_outDataCore$D_OUT;
  wire lut_serverAdapter_outDataCore$CLR,
       lut_serverAdapter_outDataCore$DEQ,
       lut_serverAdapter_outDataCore$EMPTY_N,
       lut_serverAdapter_outDataCore$ENQ,
       lut_serverAdapter_outDataCore$FULL_N;

  // ports of submodule out_fifo
  wire [223 : 0] out_fifo$D_IN, out_fifo$D_OUT;
  wire out_fifo$CLR,
       out_fifo$DEQ,
       out_fifo$EMPTY_N,
       out_fifo$ENQ,
       out_fifo$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_lut_serverAdapter_outData_enqAndDeq,
       WILL_FIRE_RL_lut_serverAdapter_stageReadResponseAlways,
       WILL_FIRE_RL_receive;

  // inputs to muxes for submodule ports
  wire [7 : 0] MUX_row_num$write_1__VAL_1;
  wire [1 : 0] MUX_lut_serverAdapter_s1_1$wset_1__VAL_2,
	       MUX_state$write_1__VAL_1;
  wire MUX_lut_memory$put_1__SEL_1,
       MUX_state$write_1__SEL_1,
       MUX_state$write_1__SEL_2,
       MUX_state$write_1__SEL_3;

  // remaining internal signals
  wire [223 : 0] x__h2575, y__h38819;
  wire [7 : 0] IF_x0188_OR_lut_serverAdapter_outData_outData_ETC__q1,
	       x__h38798;
  wire [2 : 0] lut_serverAdapter_cnt_6_PLUS_IF_lut_serverAdap_ETC___d32;
  wire [1 : 0] ab__h1854;
  wire lut_serverAdapter_cnt_6_SLT_3___d61,
       x__h11825,
       x__h16318,
       x__h20811,
       x__h25304,
       x__h2662,
       x__h2677,
       x__h2692,
       x__h2707,
       x__h2722,
       x__h2737,
       x__h2752,
       x__h2767,
       x__h2839,
       x__h29797,
       x__h30188,
       x__h30190,
       x__h30192,
       x__h30194,
       x__h30196,
       x__h30198,
       x__h30699,
       x__h30701,
       x__h30703,
       x__h30705,
       x__h30707,
       x__h30709,
       x__h31214,
       x__h31216,
       x__h31218,
       x__h31220,
       x__h31222,
       x__h31224,
       x__h31729,
       x__h31731,
       x__h31733,
       x__h31735,
       x__h31737,
       x__h31739,
       x__h32244,
       x__h32246,
       x__h32248,
       x__h32250,
       x__h32252,
       x__h32254,
       x__h32759,
       x__h32761,
       x__h32763,
       x__h32765,
       x__h32767,
       x__h32769,
       x__h33274,
       x__h33276,
       x__h33278,
       x__h33280,
       x__h33282,
       x__h33284,
       x__h34290,
       x__h38282,
       x__h38284,
       x__h38286,
       x__h38288,
       x__h38290,
       x__h38292,
       x__h7332,
       y__h11826,
       y__h16319,
       y__h20812,
       y__h25305,
       y__h2663,
       y__h2678,
       y__h2693,
       y__h2708,
       y__h2723,
       y__h2738,
       y__h2753,
       y__h2768,
       y__h29798,
       y__h34291,
       y__h7333;

  // actionvalue method get
  assign get = out_fifo$D_OUT ;
  assign RDY_get = out_fifo$EMPTY_N ;

  // action method put
  assign RDY_put = in_fifo$FULL_N ;

  // submodule in_fifo
  FIFO2 #(.width(32'd224), .guarded(32'd1)) in_fifo(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(in_fifo$D_IN),
						    .ENQ(in_fifo$ENQ),
						    .DEQ(in_fifo$DEQ),
						    .CLR(in_fifo$CLR),
						    .D_OUT(in_fifo$D_OUT),
						    .FULL_N(in_fifo$FULL_N),
						    .EMPTY_N(in_fifo$EMPTY_N));

  // submodule lut_memory
  BRAM1Load #(.FILENAME("ell.mem"),
	      .PIPELINED(1'd0),
	      .ADDR_WIDTH(32'd8),
	      .DATA_WIDTH(32'd73),
	      .MEMSIZE(9'd224),
	      .BINARY(1'd1)) lut_memory(.CLK(CLK),
					.ADDR(lut_memory$ADDR),
					.DI(lut_memory$DI),
					.WE(lut_memory$WE),
					.EN(lut_memory$EN),
					.DO(lut_memory$DO));

  // submodule lut_serverAdapter_outDataCore
  SizedFIFO #(.p1width(32'd73),
	      .p2depth(32'd3),
	      .p3cntr_width(32'd1),
	      .guarded(32'd1)) lut_serverAdapter_outDataCore(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(lut_serverAdapter_outDataCore$D_IN),
							     .ENQ(lut_serverAdapter_outDataCore$ENQ),
							     .DEQ(lut_serverAdapter_outDataCore$DEQ),
							     .CLR(lut_serverAdapter_outDataCore$CLR),
							     .D_OUT(lut_serverAdapter_outDataCore$D_OUT),
							     .FULL_N(lut_serverAdapter_outDataCore$FULL_N),
							     .EMPTY_N(lut_serverAdapter_outDataCore$EMPTY_N));

  // submodule out_fifo
  FIFO2 #(.width(32'd224), .guarded(32'd1)) out_fifo(.RST(RST_N),
						     .CLK(CLK),
						     .D_IN(out_fifo$D_IN),
						     .ENQ(out_fifo$ENQ),
						     .DEQ(out_fifo$DEQ),
						     .CLR(out_fifo$CLR),
						     .D_OUT(out_fifo$D_OUT),
						     .FULL_N(out_fifo$FULL_N),
						     .EMPTY_N(out_fifo$EMPTY_N));

  // rule RL_receive
  assign WILL_FIRE_RL_receive =
	     (row_num == 8'd225 && state == 2'd2 ||
	      lut_serverAdapter_cnt_6_SLT_3___d61 &&
	      (lut_serverAdapter_outDataCore$EMPTY_N ||
	       lut_serverAdapter_outData_enqData$whas) &&
	      lut_serverAdapter_outData_outData$whas) &&
	     (state == 2'd1 || state == 2'd2) ;

  // rule RL_lut_serverAdapter_stageReadResponseAlways
  assign WILL_FIRE_RL_lut_serverAdapter_stageReadResponseAlways =
	     MUX_lut_memory$put_1__SEL_1 || MUX_state$write_1__SEL_3 ;

  // rule RL_lut_serverAdapter_outData_enqAndDeq
  assign WILL_FIRE_RL_lut_serverAdapter_outData_enqAndDeq =
	     lut_serverAdapter_outDataCore$EMPTY_N &&
	     lut_serverAdapter_outDataCore$FULL_N &&
	     MUX_lut_memory$put_1__SEL_1 &&
	     lut_serverAdapter_outData_enqData$whas ;

  // inputs to muxes for submodule ports
  assign MUX_lut_memory$put_1__SEL_1 =
	     WILL_FIRE_RL_receive && (row_num != 8'd225 || state != 2'd2) ;
  assign MUX_state$write_1__SEL_1 =
	     WILL_FIRE_RL_receive &&
	     (row_num == 8'd225 && state == 2'd2 || row_num == 8'd224) ;
  assign MUX_state$write_1__SEL_2 = out_fifo$FULL_N && state == 2'd3 ;
  assign MUX_state$write_1__SEL_3 =
	     in_fifo$EMPTY_N && lut_serverAdapter_cnt_6_SLT_3___d61 &&
	     state == 2'd0 ;
  assign MUX_lut_serverAdapter_s1_1$wset_1__VAL_2 =
	     { 1'd1, !ab__h1854[1] || ab__h1854[0] } ;
  assign MUX_row_num$write_1__VAL_1 = row_num + 8'd1 ;
  assign MUX_state$write_1__VAL_1 =
	     (row_num == 8'd225 && state == 2'd2) ? 2'd3 : 2'd2 ;

  // inlined wires
  assign lut_serverAdapter_outData_enqData$whas =
	     (!lut_serverAdapter_s1[0] ||
	      lut_serverAdapter_outDataCore$FULL_N) &&
	     lut_serverAdapter_s1[1] &&
	     lut_serverAdapter_s1[0] ;
  assign lut_serverAdapter_outData_outData$wget =
	     lut_serverAdapter_outDataCore$EMPTY_N ?
	       lut_serverAdapter_outDataCore$D_OUT :
	       lut_memory$DO ;
  assign lut_serverAdapter_outData_outData$whas =
	     lut_serverAdapter_outDataCore$EMPTY_N ||
	     !lut_serverAdapter_outDataCore$EMPTY_N &&
	     lut_serverAdapter_outData_enqData$whas ;
  assign lut_serverAdapter_cnt_1$whas =
	     WILL_FIRE_RL_lut_serverAdapter_stageReadResponseAlways &&
	     (!ab__h1854[1] || ab__h1854[0]) ;
  assign lut_serverAdapter_s1_1$wget =
	     MUX_state$write_1__SEL_2 ?
	       2'd0 :
	       MUX_lut_serverAdapter_s1_1$wset_1__VAL_2 ;
  assign lut_serverAdapter_s1_1$whas =
	     MUX_state$write_1__SEL_2 ||
	     WILL_FIRE_RL_lut_serverAdapter_stageReadResponseAlways ;

  // register in
  assign in$D_IN = in_fifo$D_OUT ;
  assign in$EN = MUX_state$write_1__SEL_3 ;

  // register lut_serverAdapter_cnt
  assign lut_serverAdapter_cnt$D_IN =
	     MUX_state$write_1__SEL_2 ?
	       3'd0 :
	       lut_serverAdapter_cnt_6_PLUS_IF_lut_serverAdap_ETC___d32 ;
  assign lut_serverAdapter_cnt$EN =
	     lut_serverAdapter_cnt_1$whas || MUX_lut_memory$put_1__SEL_1 ||
	     MUX_state$write_1__SEL_2 ;

  // register lut_serverAdapter_s1
  assign lut_serverAdapter_s1$D_IN =
	     { lut_serverAdapter_s1_1$whas && lut_serverAdapter_s1_1$wget[1],
	       lut_serverAdapter_s1_1$wget[0] } ;
  assign lut_serverAdapter_s1$EN = 1'd1 ;

  // register out
  assign out$D_IN = (x__h2662 ^ y__h2663) ? out | x__h2575 : out & y__h38819 ;
  assign out$EN = MUX_lut_memory$put_1__SEL_1 ;

  // register row_num
  always@(MUX_lut_memory$put_1__SEL_1 or
	  MUX_row_num$write_1__VAL_1 or
	  MUX_state$write_1__SEL_3 or MUX_state$write_1__SEL_2)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_lut_memory$put_1__SEL_1: row_num$D_IN = MUX_row_num$write_1__VAL_1;
      MUX_state$write_1__SEL_3: row_num$D_IN = MUX_row_num$write_1__VAL_1;
      MUX_state$write_1__SEL_2: row_num$D_IN = 8'd0;
      default: row_num$D_IN = 8'b10101010 /* unspecified value */ ;
    endcase
  end
  assign row_num$EN =
	     WILL_FIRE_RL_receive && (row_num != 8'd225 || state != 2'd2) ||
	     MUX_state$write_1__SEL_3 ||
	     MUX_state$write_1__SEL_2 ;

  // register state
  always@(MUX_state$write_1__SEL_1 or
	  MUX_state$write_1__VAL_1 or
	  MUX_state$write_1__SEL_2 or MUX_state$write_1__SEL_3)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_state$write_1__SEL_1: state$D_IN = MUX_state$write_1__VAL_1;
      MUX_state$write_1__SEL_2: state$D_IN = 2'd0;
      MUX_state$write_1__SEL_3: state$D_IN = 2'd1;
      default: state$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign state$EN =
	     WILL_FIRE_RL_receive &&
	     (row_num == 8'd225 && state == 2'd2 || row_num == 8'd224) ||
	     MUX_state$write_1__SEL_2 ||
	     MUX_state$write_1__SEL_3 ;

  // submodule in_fifo
  assign in_fifo$D_IN = put_x ;
  assign in_fifo$ENQ = EN_put ;
  assign in_fifo$DEQ = MUX_state$write_1__SEL_3 ;
  assign in_fifo$CLR = 1'b0 ;

  // submodule lut_memory
  assign lut_memory$ADDR = row_num ;
  assign lut_memory$DI =
	     MUX_lut_memory$put_1__SEL_1 ?
	       73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */  :
	       73'h0AAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign lut_memory$WE = 1'd0 ;
  assign lut_memory$EN =
	     WILL_FIRE_RL_receive && (row_num != 8'd225 || state != 2'd2) ||
	     MUX_state$write_1__SEL_3 ;

  // submodule lut_serverAdapter_outDataCore
  assign lut_serverAdapter_outDataCore$D_IN = lut_memory$DO ;
  assign lut_serverAdapter_outDataCore$ENQ =
	     WILL_FIRE_RL_lut_serverAdapter_outData_enqAndDeq ||
	     lut_serverAdapter_outDataCore$FULL_N &&
	     !MUX_lut_memory$put_1__SEL_1 &&
	     lut_serverAdapter_outData_enqData$whas ;
  assign lut_serverAdapter_outDataCore$DEQ =
	     WILL_FIRE_RL_lut_serverAdapter_outData_enqAndDeq ||
	     lut_serverAdapter_outDataCore$EMPTY_N &&
	     MUX_lut_memory$put_1__SEL_1 &&
	     !lut_serverAdapter_outData_enqData$whas ;
  assign lut_serverAdapter_outDataCore$CLR = MUX_state$write_1__SEL_2 ;

  // submodule out_fifo
  assign out_fifo$D_IN = out ;
  assign out_fifo$ENQ = MUX_state$write_1__SEL_2 ;
  assign out_fifo$DEQ = EN_get ;
  assign out_fifo$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_x0188_OR_lut_serverAdapter_outData_outData_ETC__q1 =
	     (x__h30188 | lut_serverAdapter_outData_outData$wget[7]) ?
	       8'd1 :
	       8'd0 ;
  assign ab__h1854 = 2'd0 ;
  assign lut_serverAdapter_cnt_6_PLUS_IF_lut_serverAdap_ETC___d32 =
	     lut_serverAdapter_cnt +
	     (lut_serverAdapter_cnt_1$whas ? 3'd1 : 3'd0) +
	     (MUX_lut_memory$put_1__SEL_1 ? 3'd7 : 3'd0) ;
  assign lut_serverAdapter_cnt_6_SLT_3___d61 =
	     (lut_serverAdapter_cnt ^ 3'h4) < 3'd7 ;
  assign x__h11825 = in[lut_serverAdapter_outData_outData$wget[23:16]] ;
  assign x__h16318 = in[lut_serverAdapter_outData_outData$wget[31:24]] ;
  assign x__h20811 = in[lut_serverAdapter_outData_outData$wget[39:32]] ;
  assign x__h25304 = in[lut_serverAdapter_outData_outData$wget[47:40]] ;
  assign x__h2575 = 224'd1 << x__h38798 ;
  assign x__h2662 = x__h2677 ^ y__h2678 ;
  assign x__h2677 = x__h2692 ^ y__h2693 ;
  assign x__h2692 = x__h2707 ^ y__h2708 ;
  assign x__h2707 = x__h2722 ^ y__h2723 ;
  assign x__h2722 = x__h2737 ^ y__h2738 ;
  assign x__h2737 = x__h2752 ^ y__h2753 ;
  assign x__h2752 = x__h2767 ^ y__h2768 ;
  assign x__h2767 =
	     lut_serverAdapter_outData_outData$wget[72] &
	     in[lut_serverAdapter_outData_outData$wget[71:64]] ;
  assign x__h2839 = in[lut_serverAdapter_outData_outData$wget[7:0]] ;
  assign x__h29797 = in[lut_serverAdapter_outData_outData$wget[55:48]] ;
  assign x__h30188 = x__h30190 | lut_serverAdapter_outData_outData$wget[6] ;
  assign x__h30190 = x__h30192 | lut_serverAdapter_outData_outData$wget[5] ;
  assign x__h30192 = x__h30194 | lut_serverAdapter_outData_outData$wget[4] ;
  assign x__h30194 = x__h30196 | lut_serverAdapter_outData_outData$wget[3] ;
  assign x__h30196 = x__h30198 | lut_serverAdapter_outData_outData$wget[2] ;
  assign x__h30198 =
	     lut_serverAdapter_outData_outData$wget[0] |
	     lut_serverAdapter_outData_outData$wget[1] ;
  assign x__h30699 = x__h30701 | lut_serverAdapter_outData_outData$wget[14] ;
  assign x__h30701 = x__h30703 | lut_serverAdapter_outData_outData$wget[13] ;
  assign x__h30703 = x__h30705 | lut_serverAdapter_outData_outData$wget[12] ;
  assign x__h30705 = x__h30707 | lut_serverAdapter_outData_outData$wget[11] ;
  assign x__h30707 = x__h30709 | lut_serverAdapter_outData_outData$wget[10] ;
  assign x__h30709 =
	     lut_serverAdapter_outData_outData$wget[8] |
	     lut_serverAdapter_outData_outData$wget[9] ;
  assign x__h31214 = x__h31216 | lut_serverAdapter_outData_outData$wget[22] ;
  assign x__h31216 = x__h31218 | lut_serverAdapter_outData_outData$wget[21] ;
  assign x__h31218 = x__h31220 | lut_serverAdapter_outData_outData$wget[20] ;
  assign x__h31220 = x__h31222 | lut_serverAdapter_outData_outData$wget[19] ;
  assign x__h31222 = x__h31224 | lut_serverAdapter_outData_outData$wget[18] ;
  assign x__h31224 =
	     lut_serverAdapter_outData_outData$wget[16] |
	     lut_serverAdapter_outData_outData$wget[17] ;
  assign x__h31729 = x__h31731 | lut_serverAdapter_outData_outData$wget[30] ;
  assign x__h31731 = x__h31733 | lut_serverAdapter_outData_outData$wget[29] ;
  assign x__h31733 = x__h31735 | lut_serverAdapter_outData_outData$wget[28] ;
  assign x__h31735 = x__h31737 | lut_serverAdapter_outData_outData$wget[27] ;
  assign x__h31737 = x__h31739 | lut_serverAdapter_outData_outData$wget[26] ;
  assign x__h31739 =
	     lut_serverAdapter_outData_outData$wget[24] |
	     lut_serverAdapter_outData_outData$wget[25] ;
  assign x__h32244 = x__h32246 | lut_serverAdapter_outData_outData$wget[38] ;
  assign x__h32246 = x__h32248 | lut_serverAdapter_outData_outData$wget[37] ;
  assign x__h32248 = x__h32250 | lut_serverAdapter_outData_outData$wget[36] ;
  assign x__h32250 = x__h32252 | lut_serverAdapter_outData_outData$wget[35] ;
  assign x__h32252 = x__h32254 | lut_serverAdapter_outData_outData$wget[34] ;
  assign x__h32254 =
	     lut_serverAdapter_outData_outData$wget[32] |
	     lut_serverAdapter_outData_outData$wget[33] ;
  assign x__h32759 = x__h32761 | lut_serverAdapter_outData_outData$wget[46] ;
  assign x__h32761 = x__h32763 | lut_serverAdapter_outData_outData$wget[45] ;
  assign x__h32763 = x__h32765 | lut_serverAdapter_outData_outData$wget[44] ;
  assign x__h32765 = x__h32767 | lut_serverAdapter_outData_outData$wget[43] ;
  assign x__h32767 = x__h32769 | lut_serverAdapter_outData_outData$wget[42] ;
  assign x__h32769 =
	     lut_serverAdapter_outData_outData$wget[40] |
	     lut_serverAdapter_outData_outData$wget[41] ;
  assign x__h33274 = x__h33276 | lut_serverAdapter_outData_outData$wget[54] ;
  assign x__h33276 = x__h33278 | lut_serverAdapter_outData_outData$wget[53] ;
  assign x__h33278 = x__h33280 | lut_serverAdapter_outData_outData$wget[52] ;
  assign x__h33280 = x__h33282 | lut_serverAdapter_outData_outData$wget[51] ;
  assign x__h33282 = x__h33284 | lut_serverAdapter_outData_outData$wget[50] ;
  assign x__h33284 =
	     lut_serverAdapter_outData_outData$wget[48] |
	     lut_serverAdapter_outData_outData$wget[49] ;
  assign x__h34290 = in[lut_serverAdapter_outData_outData$wget[63:56]] ;
  assign x__h38282 = x__h38284 | lut_serverAdapter_outData_outData$wget[62] ;
  assign x__h38284 = x__h38286 | lut_serverAdapter_outData_outData$wget[61] ;
  assign x__h38286 = x__h38288 | lut_serverAdapter_outData_outData$wget[60] ;
  assign x__h38288 = x__h38290 | lut_serverAdapter_outData_outData$wget[59] ;
  assign x__h38290 = x__h38292 | lut_serverAdapter_outData_outData$wget[58] ;
  assign x__h38292 =
	     lut_serverAdapter_outData_outData$wget[56] |
	     lut_serverAdapter_outData_outData$wget[57] ;
  assign x__h38798 = row_num - 8'd1 ;
  assign x__h7332 = in[lut_serverAdapter_outData_outData$wget[15:8]] ;
  assign y__h11826 = x__h31214 | lut_serverAdapter_outData_outData$wget[23] ;
  assign y__h16319 = x__h31729 | lut_serverAdapter_outData_outData$wget[31] ;
  assign y__h20812 = x__h32244 | lut_serverAdapter_outData_outData$wget[39] ;
  assign y__h25305 = x__h32759 | lut_serverAdapter_outData_outData$wget[47] ;
  assign y__h2663 = x__h34290 & y__h34291 ;
  assign y__h2678 = x__h29797 & y__h29798 ;
  assign y__h2693 = x__h25304 & y__h25305 ;
  assign y__h2708 = x__h20811 & y__h20812 ;
  assign y__h2723 = x__h16318 & y__h16319 ;
  assign y__h2738 = x__h11825 & y__h11826 ;
  assign y__h2753 = x__h7332 & y__h7333 ;
  assign y__h2768 =
	     x__h2839 &
	     IF_x0188_OR_lut_serverAdapter_outData_outData_ETC__q1[0] ;
  assign y__h29798 = x__h33274 | lut_serverAdapter_outData_outData$wget[55] ;
  assign y__h34291 = x__h38282 | lut_serverAdapter_outData_outData$wget[63] ;
  assign y__h38819 = ~x__h2575 ;
  assign y__h7333 = x__h30699 | lut_serverAdapter_outData_outData$wget[15] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        in <= `BSV_ASSIGNMENT_DELAY 224'd0;
	lut_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY 3'd0;
	lut_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY 2'd0;
	out <= `BSV_ASSIGNMENT_DELAY 224'd0;
	row_num <= `BSV_ASSIGNMENT_DELAY 8'd0;
	state <= `BSV_ASSIGNMENT_DELAY 2'd0;
      end
    else
      begin
        if (in$EN) in <= `BSV_ASSIGNMENT_DELAY in$D_IN;
	if (lut_serverAdapter_cnt$EN)
	  lut_serverAdapter_cnt <= `BSV_ASSIGNMENT_DELAY
	      lut_serverAdapter_cnt$D_IN;
	if (lut_serverAdapter_s1$EN)
	  lut_serverAdapter_s1 <= `BSV_ASSIGNMENT_DELAY
	      lut_serverAdapter_s1$D_IN;
	if (out$EN) out <= `BSV_ASSIGNMENT_DELAY out$D_IN;
	if (row_num$EN) row_num <= `BSV_ASSIGNMENT_DELAY row_num$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    in = 224'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    lut_serverAdapter_cnt = 3'h2;
    lut_serverAdapter_s1 = 2'h2;
    out = 224'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    row_num = 8'hAA;
    state = 2'h2;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (lut_serverAdapter_s1[1] && !lut_serverAdapter_outDataCore$FULL_N)
	$display("ERROR: %m: mkBRAMSeverAdapter overrun");
  end
  // synopsys translate_on
endmodule  // mkEllBMVM

