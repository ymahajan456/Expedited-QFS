//
// Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
//
// On Tue May  8 03:46:13 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_wiedemann_in               O     1 const
// RDY_wiedemann_out__write       O     1 reg
// wiedemann_out__read            O   224 reg
// RDY_wiedemann_out__read        O     1 reg
// RDY_wiedemann_out_degree__write  O     1 reg
// wiedemann_out_degree__read     O    32 reg
// RDY_wiedemann_out_degree__read  O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// wiedemann_out__write_1         I   224
// wiedemann_out_degree__write_1  I    32
// EN_wiedemann_in                I     1
// EN_wiedemann_out__write        I     1
// EN_wiedemann_out_degree__write  I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkWiedemann(CLK,
		   RST_N,

		   EN_wiedemann_in,
		   RDY_wiedemann_in,

		   wiedemann_out__write_1,
		   EN_wiedemann_out__write,
		   RDY_wiedemann_out__write,

		   wiedemann_out__read,
		   RDY_wiedemann_out__read,

		   wiedemann_out_degree__write_1,
		   EN_wiedemann_out_degree__write,
		   RDY_wiedemann_out_degree__write,

		   wiedemann_out_degree__read,
		   RDY_wiedemann_out_degree__read);
  input  CLK;
  input  RST_N;

  // action method wiedemann_in
  input  EN_wiedemann_in;
  output RDY_wiedemann_in;

  // action method wiedemann_out__write
  input  [223 : 0] wiedemann_out__write_1;
  input  EN_wiedemann_out__write;
  output RDY_wiedemann_out__write;

  // value method wiedemann_out__read
  output [223 : 0] wiedemann_out__read;
  output RDY_wiedemann_out__read;

  // action method wiedemann_out_degree__write
  input  [31 : 0] wiedemann_out_degree__write_1;
  input  EN_wiedemann_out_degree__write;
  output RDY_wiedemann_out_degree__write;

  // value method wiedemann_out_degree__read
  output [31 : 0] wiedemann_out_degree__read;
  output RDY_wiedemann_out_degree__read;

  // signals for module outputs
  wire [223 : 0] wiedemann_out__read;
  wire [31 : 0] wiedemann_out_degree__read;
  wire RDY_wiedemann_in,
       RDY_wiedemann_out__read,
       RDY_wiedemann_out__write,
       RDY_wiedemann_out_degree__read,
       RDY_wiedemann_out_degree__write;

  // register c
  reg [223 : 0] c;
  wire [223 : 0] c$D_IN;
  wire c$EN;

  // register d
  reg [31 : 0] d;
  wire [31 : 0] d$D_IN;
  wire d$EN;

  // register done
  reg done;
  wire done$D_IN, done$EN;

  // register mul
  reg [223 : 0] mul;
  wire [223 : 0] mul$D_IN;
  wire mul$EN;

  // register n
  reg [31 : 0] n;
  wire [31 : 0] n$D_IN;
  wire n$EN;

  // register random_initialized
  reg random_initialized;
  wire random_initialized$D_IN, random_initialized$EN;

  // register s
  reg [223 : 0] s;
  wire [223 : 0] s$D_IN;
  wire s$EN;

  // register state
  reg [2 : 0] state;
  reg [2 : 0] state$D_IN;
  wire state$EN;

  // register t
  reg [223 : 0] t;
  wire [223 : 0] t$D_IN;
  wire t$EN;

  // register x
  reg [223 : 0] x;
  wire [223 : 0] x$D_IN;
  wire x$EN;

  // ports of submodule ifc
  wire [223 : 0] ifc$get, ifc$put_x;
  wire ifc$EN_get, ifc$EN_put, ifc$RDY_get, ifc$RDY_put;

  // ports of submodule ifc2
  wire [223 : 0] ifc2$polynomial__read,
		 ifc2$polynomial__write_1,
		 ifc2$start_s_in;
  wire [31 : 0] ifc2$poly_length__read, ifc2$poly_length__write_1;
  wire ifc2$EN_poly_length__write,
       ifc2$EN_polynomial__write,
       ifc2$EN_start,
       ifc2$RDY_poly_length__read,
       ifc2$RDY_polynomial__read;

  // ports of submodule random
  wire [223 : 0] random$OUT;
  wire random$EN;

  // rule scheduling signals
  wire WILL_FIRE_RL_state_s0_1,
       WILL_FIRE_RL_state_s0_2,
       WILL_FIRE_RL_state_s1,
       WILL_FIRE_RL_state_s2;

  // inputs to muxes for submodule ports
  wire [31 : 0] MUX_n$write_1__VAL_2;
  wire [2 : 0] MUX_state$write_1__VAL_4;
  wire MUX_c$write_1__SEL_1;

  // remaining internal signals
  wire [223 : 0] x__h1149, y__h29440;
  wire n_10_SLT_224___d924,
       x__h2750,
       x__h2765,
       x__h2780,
       x__h2795,
       x__h2810,
       x__h2825,
       x__h2840,
       x__h2855,
       x__h2870,
       x__h2885,
       x__h2900,
       x__h2915,
       x__h2930,
       x__h2945,
       x__h2960,
       x__h2975,
       x__h2990,
       x__h3005,
       x__h3020,
       x__h3035,
       x__h3050,
       x__h3065,
       x__h3080,
       x__h3095,
       x__h3110,
       x__h3125,
       x__h3140,
       x__h3155,
       x__h3170,
       x__h3185,
       x__h3200,
       x__h3215,
       x__h3230,
       x__h3245,
       x__h3260,
       x__h3275,
       x__h3290,
       x__h3305,
       x__h3320,
       x__h3335,
       x__h3350,
       x__h3365,
       x__h3380,
       x__h3395,
       x__h3410,
       x__h3425,
       x__h3440,
       x__h3455,
       x__h3470,
       x__h3485,
       x__h3500,
       x__h3515,
       x__h3530,
       x__h3545,
       x__h3560,
       x__h3575,
       x__h3590,
       x__h3605,
       x__h3620,
       x__h3635,
       x__h3650,
       x__h3665,
       x__h3680,
       x__h3695,
       x__h3710,
       x__h3725,
       x__h3740,
       x__h3755,
       x__h3770,
       x__h3785,
       x__h3800,
       x__h3815,
       x__h3830,
       x__h3845,
       x__h3860,
       x__h3875,
       x__h3890,
       x__h3905,
       x__h3920,
       x__h3935,
       x__h3950,
       x__h3965,
       x__h3980,
       x__h3995,
       x__h4010,
       x__h4025,
       x__h4040,
       x__h4055,
       x__h4070,
       x__h4085,
       x__h4100,
       x__h4115,
       x__h4130,
       x__h4145,
       x__h4160,
       x__h4175,
       x__h4190,
       x__h4205,
       x__h4220,
       x__h4235,
       x__h4250,
       x__h4265,
       x__h4280,
       x__h4295,
       x__h4310,
       x__h4325,
       x__h4340,
       x__h4355,
       x__h4370,
       x__h4385,
       x__h4400,
       x__h4415,
       x__h4430,
       x__h4445,
       x__h4460,
       x__h4475,
       x__h4490,
       x__h4505,
       x__h4520,
       x__h4535,
       x__h4550,
       x__h4565,
       x__h4580,
       x__h4595,
       x__h4610,
       x__h4625,
       x__h4640,
       x__h4655,
       x__h4670,
       x__h4685,
       x__h4700,
       x__h4715,
       x__h4730,
       x__h4745,
       x__h4760,
       x__h4775,
       x__h4790,
       x__h4805,
       x__h4820,
       x__h4835,
       x__h4850,
       x__h4865,
       x__h4880,
       x__h4895,
       x__h4910,
       x__h4925,
       x__h4940,
       x__h4955,
       x__h4970,
       x__h4985,
       x__h5000,
       x__h5015,
       x__h5030,
       x__h5045,
       x__h5060,
       x__h5075,
       x__h5090,
       x__h5105,
       x__h5120,
       x__h5135,
       x__h5150,
       x__h5165,
       x__h5180,
       x__h5195,
       x__h5210,
       x__h5225,
       x__h5240,
       x__h5255,
       x__h5270,
       x__h5285,
       x__h5300,
       x__h5315,
       x__h5330,
       x__h5345,
       x__h5360,
       x__h5375,
       x__h5390,
       x__h5405,
       x__h5420,
       x__h5435,
       x__h5450,
       x__h5465,
       x__h5480,
       x__h5495,
       x__h5510,
       x__h5525,
       x__h5540,
       x__h5555,
       x__h5570,
       x__h5585,
       x__h5600,
       x__h5615,
       x__h5630,
       x__h5645,
       x__h5660,
       x__h5675,
       x__h5690,
       x__h5705,
       x__h5720,
       x__h5735,
       x__h5750,
       x__h5765,
       x__h5780,
       x__h5795,
       x__h5810,
       x__h5825,
       x__h5840,
       x__h5855,
       x__h5870,
       x__h5885,
       x__h5900,
       x__h5915,
       x__h5930,
       x__h5945,
       x__h5960,
       x__h5975,
       x__h5990,
       x__h6005,
       x__h6020,
       x__h6035,
       x__h6050,
       x__h6065,
       x__h6080,
       y__h2751,
       y__h2766,
       y__h2781,
       y__h2796,
       y__h2811,
       y__h2826,
       y__h2841,
       y__h2856,
       y__h2871,
       y__h2886,
       y__h2901,
       y__h2916,
       y__h2931,
       y__h2946,
       y__h2961,
       y__h2976,
       y__h2991,
       y__h3006,
       y__h3021,
       y__h3036,
       y__h3051,
       y__h3066,
       y__h3081,
       y__h3096,
       y__h3111,
       y__h3126,
       y__h3141,
       y__h3156,
       y__h3171,
       y__h3186,
       y__h3201,
       y__h3216,
       y__h3231,
       y__h3246,
       y__h3261,
       y__h3276,
       y__h3291,
       y__h3306,
       y__h3321,
       y__h3336,
       y__h3351,
       y__h3366,
       y__h3381,
       y__h3396,
       y__h3411,
       y__h3426,
       y__h3441,
       y__h3456,
       y__h3471,
       y__h3486,
       y__h3501,
       y__h3516,
       y__h3531,
       y__h3546,
       y__h3561,
       y__h3576,
       y__h3591,
       y__h3606,
       y__h3621,
       y__h3636,
       y__h3651,
       y__h3666,
       y__h3681,
       y__h3696,
       y__h3711,
       y__h3726,
       y__h3741,
       y__h3756,
       y__h3771,
       y__h3786,
       y__h3801,
       y__h3816,
       y__h3831,
       y__h3846,
       y__h3861,
       y__h3876,
       y__h3891,
       y__h3906,
       y__h3921,
       y__h3936,
       y__h3951,
       y__h3966,
       y__h3981,
       y__h3996,
       y__h4011,
       y__h4026,
       y__h4041,
       y__h4056,
       y__h4071,
       y__h4086,
       y__h4101,
       y__h4116,
       y__h4131,
       y__h4146,
       y__h4161,
       y__h4176,
       y__h4191,
       y__h4206,
       y__h4221,
       y__h4236,
       y__h4251,
       y__h4266,
       y__h4281,
       y__h4296,
       y__h4311,
       y__h4326,
       y__h4341,
       y__h4356,
       y__h4371,
       y__h4386,
       y__h4401,
       y__h4416,
       y__h4431,
       y__h4446,
       y__h4461,
       y__h4476,
       y__h4491,
       y__h4506,
       y__h4521,
       y__h4536,
       y__h4551,
       y__h4566,
       y__h4581,
       y__h4596,
       y__h4611,
       y__h4626,
       y__h4641,
       y__h4656,
       y__h4671,
       y__h4686,
       y__h4701,
       y__h4716,
       y__h4731,
       y__h4746,
       y__h4761,
       y__h4776,
       y__h4791,
       y__h4806,
       y__h4821,
       y__h4836,
       y__h4851,
       y__h4866,
       y__h4881,
       y__h4896,
       y__h4911,
       y__h4926,
       y__h4941,
       y__h4956,
       y__h4971,
       y__h4986,
       y__h5001,
       y__h5016,
       y__h5031,
       y__h5046,
       y__h5061,
       y__h5076,
       y__h5091,
       y__h5106,
       y__h5121,
       y__h5136,
       y__h5151,
       y__h5166,
       y__h5181,
       y__h5196,
       y__h5211,
       y__h5226,
       y__h5241,
       y__h5256,
       y__h5271,
       y__h5286,
       y__h5301,
       y__h5316,
       y__h5331,
       y__h5346,
       y__h5361,
       y__h5376,
       y__h5391,
       y__h5406,
       y__h5421,
       y__h5436,
       y__h5451,
       y__h5466,
       y__h5481,
       y__h5496,
       y__h5511,
       y__h5526,
       y__h5541,
       y__h5556,
       y__h5571,
       y__h5586,
       y__h5601,
       y__h5616,
       y__h5631,
       y__h5646,
       y__h5661,
       y__h5676,
       y__h5691,
       y__h5706,
       y__h5721,
       y__h5736,
       y__h5751,
       y__h5766,
       y__h5781,
       y__h5796,
       y__h5811,
       y__h5826,
       y__h5841,
       y__h5856,
       y__h5871,
       y__h5886,
       y__h5901,
       y__h5916,
       y__h5931,
       y__h5946,
       y__h5961,
       y__h5976,
       y__h5991,
       y__h6006,
       y__h6021,
       y__h6036,
       y__h6051,
       y__h6066,
       y__h6081;

  // action method wiedemann_in
  assign RDY_wiedemann_in = 1'd1 ;

  // action method wiedemann_out__write
  assign RDY_wiedemann_out__write = done ;

  // value method wiedemann_out__read
  assign wiedemann_out__read = c ;
  assign RDY_wiedemann_out__read = done ;

  // action method wiedemann_out_degree__write
  assign RDY_wiedemann_out_degree__write = done ;

  // value method wiedemann_out_degree__read
  assign wiedemann_out_degree__read = d ;
  assign RDY_wiedemann_out_degree__read = done ;

  // submodule ifc
  mkEllBMVM #(.lut_num(32'd0)) ifc(.CLK(CLK),
				   .RST_N(RST_N),
				   .put_x(ifc$put_x),
				   .EN_get(ifc$EN_get),
				   .EN_put(ifc$EN_put),
				   .get(ifc$get),
				   .RDY_get(ifc$RDY_get),
				   .RDY_put(ifc$RDY_put));

  // submodule ifc2
  mkBerlekampMassey ifc2(.CLK(CLK),
			 .RST_N(RST_N),
			 .poly_length__write_1(ifc2$poly_length__write_1),
			 .polynomial__write_1(ifc2$polynomial__write_1),
			 .start_s_in(ifc2$start_s_in),
			 .EN_start(ifc2$EN_start),
			 .EN_polynomial__write(ifc2$EN_polynomial__write),
			 .EN_poly_length__write(ifc2$EN_poly_length__write),
			 .RDY_start(),
			 .RDY_polynomial__write(),
			 .polynomial__read(ifc2$polynomial__read),
			 .RDY_polynomial__read(ifc2$RDY_polynomial__read),
			 .RDY_poly_length__write(),
			 .poly_length__read(ifc2$poly_length__read),
			 .RDY_poly_length__read(ifc2$RDY_poly_length__read),
			 .outputValid(),
			 .RDY_outputValid());

  // submodule random
  ConstrainedRandom #(.width(32'd224),
		      .min(224'h0),
		      .max(224'hFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)) random(.RST(RST_N),
												  .CLK(CLK),
												  .EN(random$EN),
												  .OUT(random$OUT));

  // rule RL_state_s0_1
  assign WILL_FIRE_RL_state_s0_1 = random_initialized && state == 3'd1 ;

  // rule RL_state_s0_2
  assign WILL_FIRE_RL_state_s0_2 = random_initialized && state == 3'd2 ;

  // rule RL_state_s1
  assign WILL_FIRE_RL_state_s1 = ifc$RDY_put && state == 3'd3 ;

  // rule RL_state_s2
  assign WILL_FIRE_RL_state_s2 = ifc$RDY_get && state == 3'd4 ;

  // inputs to muxes for submodule ports
  assign MUX_c$write_1__SEL_1 =
	     ifc2$RDY_poly_length__read && ifc2$RDY_polynomial__read &&
	     state == 3'd7 ;
  assign MUX_n$write_1__VAL_2 = n + 32'd1 ;
  assign MUX_state$write_1__VAL_4 = n_10_SLT_224___d924 ? 3'd3 : 3'd6 ;

  // register c
  assign c$D_IN =
	     MUX_c$write_1__SEL_1 ?
	       ifc2$polynomial__read :
	       wiedemann_out__write_1 ;
  assign c$EN = EN_wiedemann_out__write || MUX_c$write_1__SEL_1 ;

  // register d
  assign d$D_IN =
	     MUX_c$write_1__SEL_1 ?
	       ifc2$poly_length__read :
	       wiedemann_out_degree__write_1 ;
  assign d$EN = EN_wiedemann_out_degree__write || MUX_c$write_1__SEL_1 ;

  // register done
  assign done$D_IN = 1'd1 ;
  assign done$EN = MUX_c$write_1__SEL_1 ;

  // register mul
  assign mul$D_IN = WILL_FIRE_RL_state_s0_1 ? random$OUT : ifc$get ;
  assign mul$EN = WILL_FIRE_RL_state_s0_1 || WILL_FIRE_RL_state_s2 ;

  // register n
  assign n$D_IN = EN_wiedemann_in ? 32'd0 : MUX_n$write_1__VAL_2 ;
  assign n$EN = WILL_FIRE_RL_state_s2 || EN_wiedemann_in ;

  // register random_initialized
  assign random_initialized$D_IN = 1'd1 ;
  assign random_initialized$EN = EN_wiedemann_in ;

  // register s
  assign s$D_IN = (x__h2750 ^ y__h2751) ? s | x__h1149 : s & y__h29440 ;
  assign s$EN = ifc$RDY_put && state == 3'd3 ;

  // register state
  always@(EN_wiedemann_in or
	  state or
	  MUX_c$write_1__SEL_1 or
	  MUX_state$write_1__VAL_4 or
	  WILL_FIRE_RL_state_s2 or
	  WILL_FIRE_RL_state_s1 or
	  WILL_FIRE_RL_state_s0_2 or WILL_FIRE_RL_state_s0_1)
  case (1'b1)
    EN_wiedemann_in: state$D_IN = 3'd1;
    state == 3'd6: state$D_IN = 3'd7;
    MUX_c$write_1__SEL_1: state$D_IN = 3'd0;
    state == 3'd5: state$D_IN = MUX_state$write_1__VAL_4;
    WILL_FIRE_RL_state_s2: state$D_IN = 3'd5;
    WILL_FIRE_RL_state_s1: state$D_IN = 3'd4;
    WILL_FIRE_RL_state_s0_2: state$D_IN = 3'd3;
    WILL_FIRE_RL_state_s0_1: state$D_IN = 3'd2;
    default: state$D_IN = 3'b010 /* unspecified value */ ;
  endcase
  assign state$EN =
	     state == 3'd5 || MUX_c$write_1__SEL_1 || EN_wiedemann_in ||
	     WILL_FIRE_RL_state_s0_1 ||
	     WILL_FIRE_RL_state_s0_2 ||
	     WILL_FIRE_RL_state_s1 ||
	     WILL_FIRE_RL_state_s2 ||
	     state == 3'd6 ;

  // register t
  assign t$D_IN = random$OUT ;
  assign t$EN = WILL_FIRE_RL_state_s0_2 ;

  // register x
  assign x$D_IN = 224'h0 ;
  assign x$EN = 1'b0 ;

  // submodule ifc
  assign ifc$put_x = mul ;
  assign ifc$EN_get = WILL_FIRE_RL_state_s2 ;
  assign ifc$EN_put = WILL_FIRE_RL_state_s1 ;

  // submodule ifc2
  assign ifc2$poly_length__write_1 = 32'h0 ;
  assign ifc2$polynomial__write_1 = 224'h0 ;
  assign ifc2$start_s_in = s ;
  assign ifc2$EN_start = state == 3'd6 ;
  assign ifc2$EN_polynomial__write = 1'b0 ;
  assign ifc2$EN_poly_length__write = 1'b0 ;

  // submodule random
  assign random$EN =
	     WILL_FIRE_RL_state_s0_2 || WILL_FIRE_RL_state_s0_1 ||
	     !random_initialized ;

  // remaining internal signals
  assign n_10_SLT_224___d924 = (n ^ 32'h80000000) < 32'h800000E0 ;
  assign x__h1149 = 224'd1 << n ;
  assign x__h2750 = x__h2765 ^ y__h2766 ;
  assign x__h2765 = x__h2780 ^ y__h2781 ;
  assign x__h2780 = x__h2795 ^ y__h2796 ;
  assign x__h2795 = x__h2810 ^ y__h2811 ;
  assign x__h2810 = x__h2825 ^ y__h2826 ;
  assign x__h2825 = x__h2840 ^ y__h2841 ;
  assign x__h2840 = x__h2855 ^ y__h2856 ;
  assign x__h2855 = x__h2870 ^ y__h2871 ;
  assign x__h2870 = x__h2885 ^ y__h2886 ;
  assign x__h2885 = x__h2900 ^ y__h2901 ;
  assign x__h2900 = x__h2915 ^ y__h2916 ;
  assign x__h2915 = x__h2930 ^ y__h2931 ;
  assign x__h2930 = x__h2945 ^ y__h2946 ;
  assign x__h2945 = x__h2960 ^ y__h2961 ;
  assign x__h2960 = x__h2975 ^ y__h2976 ;
  assign x__h2975 = x__h2990 ^ y__h2991 ;
  assign x__h2990 = x__h3005 ^ y__h3006 ;
  assign x__h3005 = x__h3020 ^ y__h3021 ;
  assign x__h3020 = x__h3035 ^ y__h3036 ;
  assign x__h3035 = x__h3050 ^ y__h3051 ;
  assign x__h3050 = x__h3065 ^ y__h3066 ;
  assign x__h3065 = x__h3080 ^ y__h3081 ;
  assign x__h3080 = x__h3095 ^ y__h3096 ;
  assign x__h3095 = x__h3110 ^ y__h3111 ;
  assign x__h3110 = x__h3125 ^ y__h3126 ;
  assign x__h3125 = x__h3140 ^ y__h3141 ;
  assign x__h3140 = x__h3155 ^ y__h3156 ;
  assign x__h3155 = x__h3170 ^ y__h3171 ;
  assign x__h3170 = x__h3185 ^ y__h3186 ;
  assign x__h3185 = x__h3200 ^ y__h3201 ;
  assign x__h3200 = x__h3215 ^ y__h3216 ;
  assign x__h3215 = x__h3230 ^ y__h3231 ;
  assign x__h3230 = x__h3245 ^ y__h3246 ;
  assign x__h3245 = x__h3260 ^ y__h3261 ;
  assign x__h3260 = x__h3275 ^ y__h3276 ;
  assign x__h3275 = x__h3290 ^ y__h3291 ;
  assign x__h3290 = x__h3305 ^ y__h3306 ;
  assign x__h3305 = x__h3320 ^ y__h3321 ;
  assign x__h3320 = x__h3335 ^ y__h3336 ;
  assign x__h3335 = x__h3350 ^ y__h3351 ;
  assign x__h3350 = x__h3365 ^ y__h3366 ;
  assign x__h3365 = x__h3380 ^ y__h3381 ;
  assign x__h3380 = x__h3395 ^ y__h3396 ;
  assign x__h3395 = x__h3410 ^ y__h3411 ;
  assign x__h3410 = x__h3425 ^ y__h3426 ;
  assign x__h3425 = x__h3440 ^ y__h3441 ;
  assign x__h3440 = x__h3455 ^ y__h3456 ;
  assign x__h3455 = x__h3470 ^ y__h3471 ;
  assign x__h3470 = x__h3485 ^ y__h3486 ;
  assign x__h3485 = x__h3500 ^ y__h3501 ;
  assign x__h3500 = x__h3515 ^ y__h3516 ;
  assign x__h3515 = x__h3530 ^ y__h3531 ;
  assign x__h3530 = x__h3545 ^ y__h3546 ;
  assign x__h3545 = x__h3560 ^ y__h3561 ;
  assign x__h3560 = x__h3575 ^ y__h3576 ;
  assign x__h3575 = x__h3590 ^ y__h3591 ;
  assign x__h3590 = x__h3605 ^ y__h3606 ;
  assign x__h3605 = x__h3620 ^ y__h3621 ;
  assign x__h3620 = x__h3635 ^ y__h3636 ;
  assign x__h3635 = x__h3650 ^ y__h3651 ;
  assign x__h3650 = x__h3665 ^ y__h3666 ;
  assign x__h3665 = x__h3680 ^ y__h3681 ;
  assign x__h3680 = x__h3695 ^ y__h3696 ;
  assign x__h3695 = x__h3710 ^ y__h3711 ;
  assign x__h3710 = x__h3725 ^ y__h3726 ;
  assign x__h3725 = x__h3740 ^ y__h3741 ;
  assign x__h3740 = x__h3755 ^ y__h3756 ;
  assign x__h3755 = x__h3770 ^ y__h3771 ;
  assign x__h3770 = x__h3785 ^ y__h3786 ;
  assign x__h3785 = x__h3800 ^ y__h3801 ;
  assign x__h3800 = x__h3815 ^ y__h3816 ;
  assign x__h3815 = x__h3830 ^ y__h3831 ;
  assign x__h3830 = x__h3845 ^ y__h3846 ;
  assign x__h3845 = x__h3860 ^ y__h3861 ;
  assign x__h3860 = x__h3875 ^ y__h3876 ;
  assign x__h3875 = x__h3890 ^ y__h3891 ;
  assign x__h3890 = x__h3905 ^ y__h3906 ;
  assign x__h3905 = x__h3920 ^ y__h3921 ;
  assign x__h3920 = x__h3935 ^ y__h3936 ;
  assign x__h3935 = x__h3950 ^ y__h3951 ;
  assign x__h3950 = x__h3965 ^ y__h3966 ;
  assign x__h3965 = x__h3980 ^ y__h3981 ;
  assign x__h3980 = x__h3995 ^ y__h3996 ;
  assign x__h3995 = x__h4010 ^ y__h4011 ;
  assign x__h4010 = x__h4025 ^ y__h4026 ;
  assign x__h4025 = x__h4040 ^ y__h4041 ;
  assign x__h4040 = x__h4055 ^ y__h4056 ;
  assign x__h4055 = x__h4070 ^ y__h4071 ;
  assign x__h4070 = x__h4085 ^ y__h4086 ;
  assign x__h4085 = x__h4100 ^ y__h4101 ;
  assign x__h4100 = x__h4115 ^ y__h4116 ;
  assign x__h4115 = x__h4130 ^ y__h4131 ;
  assign x__h4130 = x__h4145 ^ y__h4146 ;
  assign x__h4145 = x__h4160 ^ y__h4161 ;
  assign x__h4160 = x__h4175 ^ y__h4176 ;
  assign x__h4175 = x__h4190 ^ y__h4191 ;
  assign x__h4190 = x__h4205 ^ y__h4206 ;
  assign x__h4205 = x__h4220 ^ y__h4221 ;
  assign x__h4220 = x__h4235 ^ y__h4236 ;
  assign x__h4235 = x__h4250 ^ y__h4251 ;
  assign x__h4250 = x__h4265 ^ y__h4266 ;
  assign x__h4265 = x__h4280 ^ y__h4281 ;
  assign x__h4280 = x__h4295 ^ y__h4296 ;
  assign x__h4295 = x__h4310 ^ y__h4311 ;
  assign x__h4310 = x__h4325 ^ y__h4326 ;
  assign x__h4325 = x__h4340 ^ y__h4341 ;
  assign x__h4340 = x__h4355 ^ y__h4356 ;
  assign x__h4355 = x__h4370 ^ y__h4371 ;
  assign x__h4370 = x__h4385 ^ y__h4386 ;
  assign x__h4385 = x__h4400 ^ y__h4401 ;
  assign x__h4400 = x__h4415 ^ y__h4416 ;
  assign x__h4415 = x__h4430 ^ y__h4431 ;
  assign x__h4430 = x__h4445 ^ y__h4446 ;
  assign x__h4445 = x__h4460 ^ y__h4461 ;
  assign x__h4460 = x__h4475 ^ y__h4476 ;
  assign x__h4475 = x__h4490 ^ y__h4491 ;
  assign x__h4490 = x__h4505 ^ y__h4506 ;
  assign x__h4505 = x__h4520 ^ y__h4521 ;
  assign x__h4520 = x__h4535 ^ y__h4536 ;
  assign x__h4535 = x__h4550 ^ y__h4551 ;
  assign x__h4550 = x__h4565 ^ y__h4566 ;
  assign x__h4565 = x__h4580 ^ y__h4581 ;
  assign x__h4580 = x__h4595 ^ y__h4596 ;
  assign x__h4595 = x__h4610 ^ y__h4611 ;
  assign x__h4610 = x__h4625 ^ y__h4626 ;
  assign x__h4625 = x__h4640 ^ y__h4641 ;
  assign x__h4640 = x__h4655 ^ y__h4656 ;
  assign x__h4655 = x__h4670 ^ y__h4671 ;
  assign x__h4670 = x__h4685 ^ y__h4686 ;
  assign x__h4685 = x__h4700 ^ y__h4701 ;
  assign x__h4700 = x__h4715 ^ y__h4716 ;
  assign x__h4715 = x__h4730 ^ y__h4731 ;
  assign x__h4730 = x__h4745 ^ y__h4746 ;
  assign x__h4745 = x__h4760 ^ y__h4761 ;
  assign x__h4760 = x__h4775 ^ y__h4776 ;
  assign x__h4775 = x__h4790 ^ y__h4791 ;
  assign x__h4790 = x__h4805 ^ y__h4806 ;
  assign x__h4805 = x__h4820 ^ y__h4821 ;
  assign x__h4820 = x__h4835 ^ y__h4836 ;
  assign x__h4835 = x__h4850 ^ y__h4851 ;
  assign x__h4850 = x__h4865 ^ y__h4866 ;
  assign x__h4865 = x__h4880 ^ y__h4881 ;
  assign x__h4880 = x__h4895 ^ y__h4896 ;
  assign x__h4895 = x__h4910 ^ y__h4911 ;
  assign x__h4910 = x__h4925 ^ y__h4926 ;
  assign x__h4925 = x__h4940 ^ y__h4941 ;
  assign x__h4940 = x__h4955 ^ y__h4956 ;
  assign x__h4955 = x__h4970 ^ y__h4971 ;
  assign x__h4970 = x__h4985 ^ y__h4986 ;
  assign x__h4985 = x__h5000 ^ y__h5001 ;
  assign x__h5000 = x__h5015 ^ y__h5016 ;
  assign x__h5015 = x__h5030 ^ y__h5031 ;
  assign x__h5030 = x__h5045 ^ y__h5046 ;
  assign x__h5045 = x__h5060 ^ y__h5061 ;
  assign x__h5060 = x__h5075 ^ y__h5076 ;
  assign x__h5075 = x__h5090 ^ y__h5091 ;
  assign x__h5090 = x__h5105 ^ y__h5106 ;
  assign x__h5105 = x__h5120 ^ y__h5121 ;
  assign x__h5120 = x__h5135 ^ y__h5136 ;
  assign x__h5135 = x__h5150 ^ y__h5151 ;
  assign x__h5150 = x__h5165 ^ y__h5166 ;
  assign x__h5165 = x__h5180 ^ y__h5181 ;
  assign x__h5180 = x__h5195 ^ y__h5196 ;
  assign x__h5195 = x__h5210 ^ y__h5211 ;
  assign x__h5210 = x__h5225 ^ y__h5226 ;
  assign x__h5225 = x__h5240 ^ y__h5241 ;
  assign x__h5240 = x__h5255 ^ y__h5256 ;
  assign x__h5255 = x__h5270 ^ y__h5271 ;
  assign x__h5270 = x__h5285 ^ y__h5286 ;
  assign x__h5285 = x__h5300 ^ y__h5301 ;
  assign x__h5300 = x__h5315 ^ y__h5316 ;
  assign x__h5315 = x__h5330 ^ y__h5331 ;
  assign x__h5330 = x__h5345 ^ y__h5346 ;
  assign x__h5345 = x__h5360 ^ y__h5361 ;
  assign x__h5360 = x__h5375 ^ y__h5376 ;
  assign x__h5375 = x__h5390 ^ y__h5391 ;
  assign x__h5390 = x__h5405 ^ y__h5406 ;
  assign x__h5405 = x__h5420 ^ y__h5421 ;
  assign x__h5420 = x__h5435 ^ y__h5436 ;
  assign x__h5435 = x__h5450 ^ y__h5451 ;
  assign x__h5450 = x__h5465 ^ y__h5466 ;
  assign x__h5465 = x__h5480 ^ y__h5481 ;
  assign x__h5480 = x__h5495 ^ y__h5496 ;
  assign x__h5495 = x__h5510 ^ y__h5511 ;
  assign x__h5510 = x__h5525 ^ y__h5526 ;
  assign x__h5525 = x__h5540 ^ y__h5541 ;
  assign x__h5540 = x__h5555 ^ y__h5556 ;
  assign x__h5555 = x__h5570 ^ y__h5571 ;
  assign x__h5570 = x__h5585 ^ y__h5586 ;
  assign x__h5585 = x__h5600 ^ y__h5601 ;
  assign x__h5600 = x__h5615 ^ y__h5616 ;
  assign x__h5615 = x__h5630 ^ y__h5631 ;
  assign x__h5630 = x__h5645 ^ y__h5646 ;
  assign x__h5645 = x__h5660 ^ y__h5661 ;
  assign x__h5660 = x__h5675 ^ y__h5676 ;
  assign x__h5675 = x__h5690 ^ y__h5691 ;
  assign x__h5690 = x__h5705 ^ y__h5706 ;
  assign x__h5705 = x__h5720 ^ y__h5721 ;
  assign x__h5720 = x__h5735 ^ y__h5736 ;
  assign x__h5735 = x__h5750 ^ y__h5751 ;
  assign x__h5750 = x__h5765 ^ y__h5766 ;
  assign x__h5765 = x__h5780 ^ y__h5781 ;
  assign x__h5780 = x__h5795 ^ y__h5796 ;
  assign x__h5795 = x__h5810 ^ y__h5811 ;
  assign x__h5810 = x__h5825 ^ y__h5826 ;
  assign x__h5825 = x__h5840 ^ y__h5841 ;
  assign x__h5840 = x__h5855 ^ y__h5856 ;
  assign x__h5855 = x__h5870 ^ y__h5871 ;
  assign x__h5870 = x__h5885 ^ y__h5886 ;
  assign x__h5885 = x__h5900 ^ y__h5901 ;
  assign x__h5900 = x__h5915 ^ y__h5916 ;
  assign x__h5915 = x__h5930 ^ y__h5931 ;
  assign x__h5930 = x__h5945 ^ y__h5946 ;
  assign x__h5945 = x__h5960 ^ y__h5961 ;
  assign x__h5960 = x__h5975 ^ y__h5976 ;
  assign x__h5975 = x__h5990 ^ y__h5991 ;
  assign x__h5990 = x__h6005 ^ y__h6006 ;
  assign x__h6005 = x__h6020 ^ y__h6021 ;
  assign x__h6020 = x__h6035 ^ y__h6036 ;
  assign x__h6035 = x__h6050 ^ y__h6051 ;
  assign x__h6050 = x__h6065 ^ y__h6066 ;
  assign x__h6065 = x__h6080 ^ y__h6081 ;
  assign x__h6080 = mul[0] & t[0] ;
  assign y__h2751 = mul[223] & t[223] ;
  assign y__h2766 = mul[222] & t[222] ;
  assign y__h2781 = mul[221] & t[221] ;
  assign y__h2796 = mul[220] & t[220] ;
  assign y__h2811 = mul[219] & t[219] ;
  assign y__h2826 = mul[218] & t[218] ;
  assign y__h2841 = mul[217] & t[217] ;
  assign y__h2856 = mul[216] & t[216] ;
  assign y__h2871 = mul[215] & t[215] ;
  assign y__h2886 = mul[214] & t[214] ;
  assign y__h2901 = mul[213] & t[213] ;
  assign y__h2916 = mul[212] & t[212] ;
  assign y__h2931 = mul[211] & t[211] ;
  assign y__h29440 = ~x__h1149 ;
  assign y__h2946 = mul[210] & t[210] ;
  assign y__h2961 = mul[209] & t[209] ;
  assign y__h2976 = mul[208] & t[208] ;
  assign y__h2991 = mul[207] & t[207] ;
  assign y__h3006 = mul[206] & t[206] ;
  assign y__h3021 = mul[205] & t[205] ;
  assign y__h3036 = mul[204] & t[204] ;
  assign y__h3051 = mul[203] & t[203] ;
  assign y__h3066 = mul[202] & t[202] ;
  assign y__h3081 = mul[201] & t[201] ;
  assign y__h3096 = mul[200] & t[200] ;
  assign y__h3111 = mul[199] & t[199] ;
  assign y__h3126 = mul[198] & t[198] ;
  assign y__h3141 = mul[197] & t[197] ;
  assign y__h3156 = mul[196] & t[196] ;
  assign y__h3171 = mul[195] & t[195] ;
  assign y__h3186 = mul[194] & t[194] ;
  assign y__h3201 = mul[193] & t[193] ;
  assign y__h3216 = mul[192] & t[192] ;
  assign y__h3231 = mul[191] & t[191] ;
  assign y__h3246 = mul[190] & t[190] ;
  assign y__h3261 = mul[189] & t[189] ;
  assign y__h3276 = mul[188] & t[188] ;
  assign y__h3291 = mul[187] & t[187] ;
  assign y__h3306 = mul[186] & t[186] ;
  assign y__h3321 = mul[185] & t[185] ;
  assign y__h3336 = mul[184] & t[184] ;
  assign y__h3351 = mul[183] & t[183] ;
  assign y__h3366 = mul[182] & t[182] ;
  assign y__h3381 = mul[181] & t[181] ;
  assign y__h3396 = mul[180] & t[180] ;
  assign y__h3411 = mul[179] & t[179] ;
  assign y__h3426 = mul[178] & t[178] ;
  assign y__h3441 = mul[177] & t[177] ;
  assign y__h3456 = mul[176] & t[176] ;
  assign y__h3471 = mul[175] & t[175] ;
  assign y__h3486 = mul[174] & t[174] ;
  assign y__h3501 = mul[173] & t[173] ;
  assign y__h3516 = mul[172] & t[172] ;
  assign y__h3531 = mul[171] & t[171] ;
  assign y__h3546 = mul[170] & t[170] ;
  assign y__h3561 = mul[169] & t[169] ;
  assign y__h3576 = mul[168] & t[168] ;
  assign y__h3591 = mul[167] & t[167] ;
  assign y__h3606 = mul[166] & t[166] ;
  assign y__h3621 = mul[165] & t[165] ;
  assign y__h3636 = mul[164] & t[164] ;
  assign y__h3651 = mul[163] & t[163] ;
  assign y__h3666 = mul[162] & t[162] ;
  assign y__h3681 = mul[161] & t[161] ;
  assign y__h3696 = mul[160] & t[160] ;
  assign y__h3711 = mul[159] & t[159] ;
  assign y__h3726 = mul[158] & t[158] ;
  assign y__h3741 = mul[157] & t[157] ;
  assign y__h3756 = mul[156] & t[156] ;
  assign y__h3771 = mul[155] & t[155] ;
  assign y__h3786 = mul[154] & t[154] ;
  assign y__h3801 = mul[153] & t[153] ;
  assign y__h3816 = mul[152] & t[152] ;
  assign y__h3831 = mul[151] & t[151] ;
  assign y__h3846 = mul[150] & t[150] ;
  assign y__h3861 = mul[149] & t[149] ;
  assign y__h3876 = mul[148] & t[148] ;
  assign y__h3891 = mul[147] & t[147] ;
  assign y__h3906 = mul[146] & t[146] ;
  assign y__h3921 = mul[145] & t[145] ;
  assign y__h3936 = mul[144] & t[144] ;
  assign y__h3951 = mul[143] & t[143] ;
  assign y__h3966 = mul[142] & t[142] ;
  assign y__h3981 = mul[141] & t[141] ;
  assign y__h3996 = mul[140] & t[140] ;
  assign y__h4011 = mul[139] & t[139] ;
  assign y__h4026 = mul[138] & t[138] ;
  assign y__h4041 = mul[137] & t[137] ;
  assign y__h4056 = mul[136] & t[136] ;
  assign y__h4071 = mul[135] & t[135] ;
  assign y__h4086 = mul[134] & t[134] ;
  assign y__h4101 = mul[133] & t[133] ;
  assign y__h4116 = mul[132] & t[132] ;
  assign y__h4131 = mul[131] & t[131] ;
  assign y__h4146 = mul[130] & t[130] ;
  assign y__h4161 = mul[129] & t[129] ;
  assign y__h4176 = mul[128] & t[128] ;
  assign y__h4191 = mul[127] & t[127] ;
  assign y__h4206 = mul[126] & t[126] ;
  assign y__h4221 = mul[125] & t[125] ;
  assign y__h4236 = mul[124] & t[124] ;
  assign y__h4251 = mul[123] & t[123] ;
  assign y__h4266 = mul[122] & t[122] ;
  assign y__h4281 = mul[121] & t[121] ;
  assign y__h4296 = mul[120] & t[120] ;
  assign y__h4311 = mul[119] & t[119] ;
  assign y__h4326 = mul[118] & t[118] ;
  assign y__h4341 = mul[117] & t[117] ;
  assign y__h4356 = mul[116] & t[116] ;
  assign y__h4371 = mul[115] & t[115] ;
  assign y__h4386 = mul[114] & t[114] ;
  assign y__h4401 = mul[113] & t[113] ;
  assign y__h4416 = mul[112] & t[112] ;
  assign y__h4431 = mul[111] & t[111] ;
  assign y__h4446 = mul[110] & t[110] ;
  assign y__h4461 = mul[109] & t[109] ;
  assign y__h4476 = mul[108] & t[108] ;
  assign y__h4491 = mul[107] & t[107] ;
  assign y__h4506 = mul[106] & t[106] ;
  assign y__h4521 = mul[105] & t[105] ;
  assign y__h4536 = mul[104] & t[104] ;
  assign y__h4551 = mul[103] & t[103] ;
  assign y__h4566 = mul[102] & t[102] ;
  assign y__h4581 = mul[101] & t[101] ;
  assign y__h4596 = mul[100] & t[100] ;
  assign y__h4611 = mul[99] & t[99] ;
  assign y__h4626 = mul[98] & t[98] ;
  assign y__h4641 = mul[97] & t[97] ;
  assign y__h4656 = mul[96] & t[96] ;
  assign y__h4671 = mul[95] & t[95] ;
  assign y__h4686 = mul[94] & t[94] ;
  assign y__h4701 = mul[93] & t[93] ;
  assign y__h4716 = mul[92] & t[92] ;
  assign y__h4731 = mul[91] & t[91] ;
  assign y__h4746 = mul[90] & t[90] ;
  assign y__h4761 = mul[89] & t[89] ;
  assign y__h4776 = mul[88] & t[88] ;
  assign y__h4791 = mul[87] & t[87] ;
  assign y__h4806 = mul[86] & t[86] ;
  assign y__h4821 = mul[85] & t[85] ;
  assign y__h4836 = mul[84] & t[84] ;
  assign y__h4851 = mul[83] & t[83] ;
  assign y__h4866 = mul[82] & t[82] ;
  assign y__h4881 = mul[81] & t[81] ;
  assign y__h4896 = mul[80] & t[80] ;
  assign y__h4911 = mul[79] & t[79] ;
  assign y__h4926 = mul[78] & t[78] ;
  assign y__h4941 = mul[77] & t[77] ;
  assign y__h4956 = mul[76] & t[76] ;
  assign y__h4971 = mul[75] & t[75] ;
  assign y__h4986 = mul[74] & t[74] ;
  assign y__h5001 = mul[73] & t[73] ;
  assign y__h5016 = mul[72] & t[72] ;
  assign y__h5031 = mul[71] & t[71] ;
  assign y__h5046 = mul[70] & t[70] ;
  assign y__h5061 = mul[69] & t[69] ;
  assign y__h5076 = mul[68] & t[68] ;
  assign y__h5091 = mul[67] & t[67] ;
  assign y__h5106 = mul[66] & t[66] ;
  assign y__h5121 = mul[65] & t[65] ;
  assign y__h5136 = mul[64] & t[64] ;
  assign y__h5151 = mul[63] & t[63] ;
  assign y__h5166 = mul[62] & t[62] ;
  assign y__h5181 = mul[61] & t[61] ;
  assign y__h5196 = mul[60] & t[60] ;
  assign y__h5211 = mul[59] & t[59] ;
  assign y__h5226 = mul[58] & t[58] ;
  assign y__h5241 = mul[57] & t[57] ;
  assign y__h5256 = mul[56] & t[56] ;
  assign y__h5271 = mul[55] & t[55] ;
  assign y__h5286 = mul[54] & t[54] ;
  assign y__h5301 = mul[53] & t[53] ;
  assign y__h5316 = mul[52] & t[52] ;
  assign y__h5331 = mul[51] & t[51] ;
  assign y__h5346 = mul[50] & t[50] ;
  assign y__h5361 = mul[49] & t[49] ;
  assign y__h5376 = mul[48] & t[48] ;
  assign y__h5391 = mul[47] & t[47] ;
  assign y__h5406 = mul[46] & t[46] ;
  assign y__h5421 = mul[45] & t[45] ;
  assign y__h5436 = mul[44] & t[44] ;
  assign y__h5451 = mul[43] & t[43] ;
  assign y__h5466 = mul[42] & t[42] ;
  assign y__h5481 = mul[41] & t[41] ;
  assign y__h5496 = mul[40] & t[40] ;
  assign y__h5511 = mul[39] & t[39] ;
  assign y__h5526 = mul[38] & t[38] ;
  assign y__h5541 = mul[37] & t[37] ;
  assign y__h5556 = mul[36] & t[36] ;
  assign y__h5571 = mul[35] & t[35] ;
  assign y__h5586 = mul[34] & t[34] ;
  assign y__h5601 = mul[33] & t[33] ;
  assign y__h5616 = mul[32] & t[32] ;
  assign y__h5631 = mul[31] & t[31] ;
  assign y__h5646 = mul[30] & t[30] ;
  assign y__h5661 = mul[29] & t[29] ;
  assign y__h5676 = mul[28] & t[28] ;
  assign y__h5691 = mul[27] & t[27] ;
  assign y__h5706 = mul[26] & t[26] ;
  assign y__h5721 = mul[25] & t[25] ;
  assign y__h5736 = mul[24] & t[24] ;
  assign y__h5751 = mul[23] & t[23] ;
  assign y__h5766 = mul[22] & t[22] ;
  assign y__h5781 = mul[21] & t[21] ;
  assign y__h5796 = mul[20] & t[20] ;
  assign y__h5811 = mul[19] & t[19] ;
  assign y__h5826 = mul[18] & t[18] ;
  assign y__h5841 = mul[17] & t[17] ;
  assign y__h5856 = mul[16] & t[16] ;
  assign y__h5871 = mul[15] & t[15] ;
  assign y__h5886 = mul[14] & t[14] ;
  assign y__h5901 = mul[13] & t[13] ;
  assign y__h5916 = mul[12] & t[12] ;
  assign y__h5931 = mul[11] & t[11] ;
  assign y__h5946 = mul[10] & t[10] ;
  assign y__h5961 = mul[9] & t[9] ;
  assign y__h5976 = mul[8] & t[8] ;
  assign y__h5991 = mul[7] & t[7] ;
  assign y__h6006 = mul[6] & t[6] ;
  assign y__h6021 = mul[5] & t[5] ;
  assign y__h6036 = mul[4] & t[4] ;
  assign y__h6051 = mul[3] & t[3] ;
  assign y__h6066 = mul[2] & t[2] ;
  assign y__h6081 = mul[1] & t[1] ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        c <= `BSV_ASSIGNMENT_DELAY 224'd0;
	d <= `BSV_ASSIGNMENT_DELAY 32'd0;
	done <= `BSV_ASSIGNMENT_DELAY 1'd0;
	mul <= `BSV_ASSIGNMENT_DELAY 224'd0;
	n <= `BSV_ASSIGNMENT_DELAY 32'd0;
	random_initialized <= `BSV_ASSIGNMENT_DELAY 1'd0;
	s <= `BSV_ASSIGNMENT_DELAY 224'd0;
	state <= `BSV_ASSIGNMENT_DELAY 3'd0;
	t <= `BSV_ASSIGNMENT_DELAY 224'd0;
	x <= `BSV_ASSIGNMENT_DELAY 224'd0;
      end
    else
      begin
        if (c$EN) c <= `BSV_ASSIGNMENT_DELAY c$D_IN;
	if (d$EN) d <= `BSV_ASSIGNMENT_DELAY d$D_IN;
	if (done$EN) done <= `BSV_ASSIGNMENT_DELAY done$D_IN;
	if (mul$EN) mul <= `BSV_ASSIGNMENT_DELAY mul$D_IN;
	if (n$EN) n <= `BSV_ASSIGNMENT_DELAY n$D_IN;
	if (random_initialized$EN)
	  random_initialized <= `BSV_ASSIGNMENT_DELAY random_initialized$D_IN;
	if (s$EN) s <= `BSV_ASSIGNMENT_DELAY s$D_IN;
	if (state$EN) state <= `BSV_ASSIGNMENT_DELAY state$D_IN;
	if (t$EN) t <= `BSV_ASSIGNMENT_DELAY t$D_IN;
	if (x$EN) x <= `BSV_ASSIGNMENT_DELAY x$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    c = 224'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    d = 32'hAAAAAAAA;
    done = 1'h0;
    mul = 224'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    n = 32'hAAAAAAAA;
    random_initialized = 1'h0;
    s = 224'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    state = 3'h2;
    t = 224'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    x = 224'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_state_s2) $display("s[n]=%b", s[n[7:0]]);
    if (RST_N != `BSV_RESET_VALUE)
      if (state == 3'd5 && n_10_SLT_224___d924) $display("n= %d", $signed(n));
  end
  // synopsys translate_on
endmodule  // mkWiedemann

