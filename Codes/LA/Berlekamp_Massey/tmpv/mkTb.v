//
// Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
//
// On Fri May  4 00:42:29 IST 2018
//
//
// Ports:
// Name                         I/O  size props
// CLK                            I     1 clock
// RST_N                          I     1 reset
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkTb(CLK,
	    RST_N);
  input  CLK;
  input  RST_N;

  // register i
  reg [31 : 0] i;
  wire [31 : 0] i$D_IN;
  wire i$EN;

  // ports of submodule ifc
  wire [31 : 0] ifc$poly_length__read, ifc$poly_length__write_1;
  wire [11 : 0] ifc$polynomial__read, ifc$polynomial__write_1, ifc$start_s_in;
  wire ifc$EN_poly_length__write,
       ifc$EN_polynomial__write,
       ifc$EN_start,
       ifc$RDY_poly_length__read,
       ifc$RDY_polynomial__read;

  // rule scheduling signals
  wire WILL_FIRE_RL_theUltimateAnswer;

  // submodule ifc
  mkBerlekampMassey ifc(.CLK(CLK),
			.RST_N(RST_N),
			.poly_length__write_1(ifc$poly_length__write_1),
			.polynomial__write_1(ifc$polynomial__write_1),
			.start_s_in(ifc$start_s_in),
			.EN_start(ifc$EN_start),
			.EN_polynomial__write(ifc$EN_polynomial__write),
			.EN_poly_length__write(ifc$EN_poly_length__write),
			.RDY_start(),
			.RDY_polynomial__write(),
			.polynomial__read(ifc$polynomial__read),
			.RDY_polynomial__read(ifc$RDY_polynomial__read),
			.RDY_poly_length__write(),
			.poly_length__read(ifc$poly_length__read),
			.RDY_poly_length__read(ifc$RDY_poly_length__read),
			.outputValid(),
			.RDY_outputValid());

  // rule RL_theUltimateAnswer
  assign WILL_FIRE_RL_theUltimateAnswer =
	     ifc$RDY_poly_length__read && ifc$RDY_polynomial__read &&
	     i == 32'd1 ;

  // register i
  assign i$D_IN = i + 32'd1 ;
  assign i$EN = i == 32'd0 ;

  // submodule ifc
  assign ifc$poly_length__write_1 = 32'h0 ;
  assign ifc$polynomial__write_1 = 12'h0 ;
  assign ifc$start_s_in = 12'b101110100101 ;
  assign ifc$EN_start = i == 32'd0 ;
  assign ifc$EN_polynomial__write = 1'b0 ;
  assign ifc$EN_poly_length__write = 1'b0 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        i <= `BSV_ASSIGNMENT_DELAY 32'd0;
      end
    else
      begin
        if (i$EN) i <= `BSV_ASSIGNMENT_DELAY i$D_IN;
      end
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    i = 32'hAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_theUltimateAnswer)
	$display("Polynolmial= %b, degree= %d",
		 ifc$polynomial__read,
		 $signed(ifc$poly_length__read));
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_theUltimateAnswer) $finish(32'd0);
  end
  // synopsys translate_on
endmodule  // mkTb

