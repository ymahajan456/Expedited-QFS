/*
 * Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
 * 
 * On Mon Apr 30 21:47:05 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "mkTb.h"


/* String declarations */
static std::string const __str_literal_4("Completed Obtaining Data: %0d", 29u);
static std::string const __str_literal_3("Completed Requesting at Address: %0d", 36u);
static std::string const __str_literal_2("ERROR: %m: mkBRAMSeverAdapter overrun", 37u);
static std::string const __str_literal_1("lut.mem", 7u);


/* Constructor */
MOD_mkTb::MOD_mkTb(tSimStateHdl simHdl, char const *name, Module *parent)
  : Module(simHdl, name, parent),
    __clk_handle_0(BAD_CLOCK_HANDLE),
    INST_ad(simHdl, "ad", this, 4u, (tUInt8)0u, (tUInt8)0u),
    INST_state(simHdl, "state", this, 1u, (tUInt8)0u, (tUInt8)0u),
    INST_test_memory(simHdl,
		     "test_memory",
		     this,
		     __str_literal_1,
		     (tUInt8)0u,
		     4u,
		     4u,
		     (tUInt8)16u,
		     (tUInt8)1u,
		     1u),
    INST_test_serverAdapter_cnt(simHdl, "test_serverAdapter_cnt", this, 3u, (tUInt8)0u, (tUInt8)0u),
    INST_test_serverAdapter_cnt_1(simHdl, "test_serverAdapter_cnt_1", this, 3u, (tUInt8)0u),
    INST_test_serverAdapter_cnt_2(simHdl, "test_serverAdapter_cnt_2", this, 3u, (tUInt8)0u),
    INST_test_serverAdapter_cnt_3(simHdl, "test_serverAdapter_cnt_3", this, 3u, (tUInt8)0u),
    INST_test_serverAdapter_outDataCore(simHdl, "test_serverAdapter_outDataCore", this, 4u, 3u, 1u, 0u),
    INST_test_serverAdapter_outData_deqCalled(simHdl, "test_serverAdapter_outData_deqCalled", this, 0u),
    INST_test_serverAdapter_outData_enqData(simHdl,
					    "test_serverAdapter_outData_enqData",
					    this,
					    4u,
					    (tUInt8)0u),
    INST_test_serverAdapter_outData_outData(simHdl,
					    "test_serverAdapter_outData_outData",
					    this,
					    4u,
					    (tUInt8)0u),
    INST_test_serverAdapter_s1(simHdl, "test_serverAdapter_s1", this, 2u, (tUInt8)0u, (tUInt8)0u),
    INST_test_serverAdapter_s1_1(simHdl, "test_serverAdapter_s1_1", this, 2u, (tUInt8)0u),
    INST_test_serverAdapter_writeWithResp(simHdl,
					  "test_serverAdapter_writeWithResp",
					  this,
					  2u,
					  (tUInt8)0u),
    PORT_RST_N((tUInt8)1u)
{
  symbol_count = 29u;
  symbols = new tSym[symbol_count];
  init_symbols_0();
}


/* Symbol init fns */

void MOD_mkTb::init_symbols_0()
{
  init_symbol(&symbols[0u], "ad", SYM_MODULE, &INST_ad);
  init_symbol(&symbols[1u], "b__h1051", SYM_DEF, &DEF_b__h1051, 3u);
  init_symbol(&symbols[2u], "RL_complete", SYM_RULE);
  init_symbol(&symbols[3u], "RL_receive", SYM_RULE);
  init_symbol(&symbols[4u], "RL_sendRequest", SYM_RULE);
  init_symbol(&symbols[5u], "RL_test_serverAdapter_cnt_finalAdd", SYM_RULE);
  init_symbol(&symbols[6u], "RL_test_serverAdapter_moveToOutFIFO", SYM_RULE);
  init_symbol(&symbols[7u], "RL_test_serverAdapter_outData_deqOnly", SYM_RULE);
  init_symbol(&symbols[8u], "RL_test_serverAdapter_outData_enqAndDeq", SYM_RULE);
  init_symbol(&symbols[9u], "RL_test_serverAdapter_outData_enqOnly", SYM_RULE);
  init_symbol(&symbols[10u], "RL_test_serverAdapter_outData_setFirstCore", SYM_RULE);
  init_symbol(&symbols[11u], "RL_test_serverAdapter_outData_setFirstEnq", SYM_RULE);
  init_symbol(&symbols[12u], "RL_test_serverAdapter_overRun", SYM_RULE);
  init_symbol(&symbols[13u], "RL_test_serverAdapter_s1__dreg_update", SYM_RULE);
  init_symbol(&symbols[14u], "RL_test_serverAdapter_stageReadResponseAlways", SYM_RULE);
  init_symbol(&symbols[15u], "state", SYM_MODULE, &INST_state);
  init_symbol(&symbols[16u], "test_memory", SYM_MODULE, &INST_test_memory);
  init_symbol(&symbols[17u], "test_serverAdapter_cnt", SYM_MODULE, &INST_test_serverAdapter_cnt);
  init_symbol(&symbols[18u], "test_serverAdapter_cnt_1", SYM_MODULE, &INST_test_serverAdapter_cnt_1);
  init_symbol(&symbols[19u], "test_serverAdapter_cnt_2", SYM_MODULE, &INST_test_serverAdapter_cnt_2);
  init_symbol(&symbols[20u], "test_serverAdapter_cnt_3", SYM_MODULE, &INST_test_serverAdapter_cnt_3);
  init_symbol(&symbols[21u],
	      "test_serverAdapter_outData_deqCalled",
	      SYM_MODULE,
	      &INST_test_serverAdapter_outData_deqCalled);
  init_symbol(&symbols[22u],
	      "test_serverAdapter_outData_enqData",
	      SYM_MODULE,
	      &INST_test_serverAdapter_outData_enqData);
  init_symbol(&symbols[23u],
	      "test_serverAdapter_outData_outData",
	      SYM_MODULE,
	      &INST_test_serverAdapter_outData_outData);
  init_symbol(&symbols[24u],
	      "test_serverAdapter_outDataCore",
	      SYM_MODULE,
	      &INST_test_serverAdapter_outDataCore);
  init_symbol(&symbols[25u], "test_serverAdapter_s1", SYM_MODULE, &INST_test_serverAdapter_s1);
  init_symbol(&symbols[26u], "test_serverAdapter_s1_1", SYM_MODULE, &INST_test_serverAdapter_s1_1);
  init_symbol(&symbols[27u],
	      "test_serverAdapter_writeWithResp",
	      SYM_MODULE,
	      &INST_test_serverAdapter_writeWithResp);
  init_symbol(&symbols[28u], "x2__h1787", SYM_DEF, &DEF_x2__h1787, 4u);
}


/* Rule actions */

void MOD_mkTb::RL_test_serverAdapter_outData_setFirstCore()
{
  tUInt8 DEF_x__h564;
  DEF_x__h564 = INST_test_serverAdapter_outDataCore.METH_first();
  INST_test_serverAdapter_outData_outData.METH_wset(DEF_x__h564);
}

void MOD_mkTb::RL_test_serverAdapter_outData_setFirstEnq()
{
  DEF_x__h653 = INST_test_serverAdapter_outData_enqData.METH_wget();
  INST_test_serverAdapter_outData_outData.METH_wset(DEF_x__h653);
}

void MOD_mkTb::RL_test_serverAdapter_outData_enqOnly()
{
  DEF_x__h653 = INST_test_serverAdapter_outData_enqData.METH_wget();
  INST_test_serverAdapter_outDataCore.METH_enq(DEF_x__h653);
}

void MOD_mkTb::RL_test_serverAdapter_outData_deqOnly()
{
  INST_test_serverAdapter_outDataCore.METH_deq();
}

void MOD_mkTb::RL_test_serverAdapter_outData_enqAndDeq()
{
  DEF_x__h653 = INST_test_serverAdapter_outData_enqData.METH_wget();
  INST_test_serverAdapter_outDataCore.METH_enq(DEF_x__h653);
  INST_test_serverAdapter_outDataCore.METH_deq();
}

void MOD_mkTb::RL_test_serverAdapter_cnt_finalAdd()
{
  tUInt8 DEF_IF_test_serverAdapter_cnt_3_whas__3_THEN_test__ETC___d33;
  tUInt8 DEF_b__h1031;
  DEF_b__h1031 = INST_test_serverAdapter_cnt_3.METH_wget();
  DEF_b__h1051 = INST_test_serverAdapter_cnt.METH_read();
  DEF_test_serverAdapter_cnt_3_whas____d23 = INST_test_serverAdapter_cnt_3.METH_whas();
  DEF_test_serverAdapter_cnt_2_whas____d21 = INST_test_serverAdapter_cnt_2.METH_whas();
  DEF_test_serverAdapter_cnt_1_whas____d20 = INST_test_serverAdapter_cnt_1.METH_whas();
  DEF_IF_test_serverAdapter_cnt_3_whas__3_THEN_test__ETC___d33 = DEF_test_serverAdapter_cnt_3_whas____d23 ? DEF_b__h1031 : (tUInt8)7u & (((tUInt8)7u & (DEF_b__h1051 + (DEF_test_serverAdapter_cnt_1_whas____d20 ? INST_test_serverAdapter_cnt_1.METH_wget() : (tUInt8)0u))) + (DEF_test_serverAdapter_cnt_2_whas____d21 ? INST_test_serverAdapter_cnt_2.METH_wget() : (tUInt8)0u));
  INST_test_serverAdapter_cnt.METH_write(DEF_IF_test_serverAdapter_cnt_3_whas__3_THEN_test__ETC___d33);
}

void MOD_mkTb::RL_test_serverAdapter_s1__dreg_update()
{
  tUInt8 DEF_test_serverAdapter_s1_1_whas__4_AND_0_OR_test__ETC___d42;
  tUInt8 DEF_IF_test_serverAdapter_s1_1_wget__5_BIT_1_6_THE_ETC___d40;
  tUInt8 DEF_test_serverAdapter_s1_1_wget__5_BIT_0___d39;
  tUInt8 DEF_test_serverAdapter_s1_1_wget__5_BIT_1___d36;
  tUInt8 DEF_test_serverAdapter_s1_1_whas____d34;
  tUInt8 DEF_test_serverAdapter_s1_1_wget____d35;
  DEF_test_serverAdapter_s1_1_wget____d35 = INST_test_serverAdapter_s1_1.METH_wget();
  DEF_test_serverAdapter_s1_1_whas____d34 = INST_test_serverAdapter_s1_1.METH_whas();
  DEF_test_serverAdapter_s1_1_wget__5_BIT_1___d36 = (tUInt8)(DEF_test_serverAdapter_s1_1_wget____d35 >> 1u);
  DEF_test_serverAdapter_s1_1_wget__5_BIT_0___d39 = (tUInt8)((tUInt8)1u & DEF_test_serverAdapter_s1_1_wget____d35);
  DEF_IF_test_serverAdapter_s1_1_wget__5_BIT_1_6_THE_ETC___d40 = DEF_test_serverAdapter_s1_1_wget__5_BIT_1___d36 ? DEF_test_serverAdapter_s1_1_wget__5_BIT_0___d39 : DEF_test_serverAdapter_s1_1_wget__5_BIT_0___d39;
  DEF_test_serverAdapter_s1_1_whas__4_AND_0_OR_test__ETC___d42 = (tUInt8)3u & (((DEF_test_serverAdapter_s1_1_whas____d34 && DEF_test_serverAdapter_s1_1_wget__5_BIT_1___d36) << 1u) | (DEF_test_serverAdapter_s1_1_whas____d34 ? DEF_IF_test_serverAdapter_s1_1_wget__5_BIT_1_6_THE_ETC___d40 : DEF_IF_test_serverAdapter_s1_1_wget__5_BIT_1_6_THE_ETC___d40));
  INST_test_serverAdapter_s1.METH_write(DEF_test_serverAdapter_s1_1_whas__4_AND_0_OR_test__ETC___d42);
}

void MOD_mkTb::RL_test_serverAdapter_stageReadResponseAlways()
{
  tUInt8 DEF_NOT_test_serverAdapter_writeWithResp_wget__4_B_ETC___d48;
  tUInt8 DEF__1_CONCAT_NOT_test_serverAdapter_writeWithResp__ETC___d49;
  tUInt8 DEF_ab_BIT_0___h1554;
  tUInt8 DEF_ab_BIT_1___h1548;
  tUInt8 DEF_ab__h1540;
  DEF_ab__h1540 = INST_test_serverAdapter_writeWithResp.METH_wget();
  DEF_ab_BIT_1___h1548 = (tUInt8)(DEF_ab__h1540 >> 1u);
  DEF_ab_BIT_0___h1554 = (tUInt8)((tUInt8)1u & DEF_ab__h1540);
  DEF_NOT_test_serverAdapter_writeWithResp_wget__4_B_ETC___d48 = !DEF_ab_BIT_1___h1548 || DEF_ab_BIT_0___h1554;
  DEF__1_CONCAT_NOT_test_serverAdapter_writeWithResp__ETC___d49 = (tUInt8)3u & (((tUInt8)1u << 1u) | DEF_NOT_test_serverAdapter_writeWithResp_wget__4_B_ETC___d48);
  INST_test_serverAdapter_s1_1.METH_wset(DEF__1_CONCAT_NOT_test_serverAdapter_writeWithResp__ETC___d49);
  if (DEF_NOT_test_serverAdapter_writeWithResp_wget__4_B_ETC___d48)
    INST_test_serverAdapter_cnt_1.METH_wset((tUInt8)1u);
}

void MOD_mkTb::RL_test_serverAdapter_moveToOutFIFO()
{
  tUInt8 DEF_v__h1657;
  DEF_v__h1657 = INST_test_memory.METH_read();
  DEF_test_serverAdapter_s1___d50 = INST_test_serverAdapter_s1.METH_read();
  DEF_test_serverAdapter_s1_0_BIT_0___d51 = (tUInt8)((tUInt8)1u & DEF_test_serverAdapter_s1___d50);
  if (DEF_test_serverAdapter_s1_0_BIT_0___d51)
    INST_test_serverAdapter_outData_enqData.METH_wset(DEF_v__h1657);
}

void MOD_mkTb::RL_test_serverAdapter_overRun()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s", &__str_literal_2);
}

void MOD_mkTb::RL_sendRequest()
{
  tUInt8 DEF_x__h1890;
  DEF_x2__h1787 = INST_ad.METH_read();
  DEF_x__h1890 = (tUInt8)15u & (DEF_x2__h1787 + (tUInt8)1u);
  INST_test_memory.METH_put((tUInt8)0u, DEF_x2__h1787, (tUInt8)10u);
  INST_test_serverAdapter_writeWithResp.METH_wset((tUInt8)0u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,4", &__str_literal_3, DEF_x2__h1787);
  INST_ad.METH_write(DEF_x__h1890);
  INST_state.METH_write((tUInt8)1u);
}

void MOD_mkTb::RL_receive()
{
  tUInt8 DEF_v__h1919;
  DEF_v__h1919 = INST_test_serverAdapter_outData_outData.METH_wget();
  INST_test_serverAdapter_outData_deqCalled.METH_wset();
  INST_test_serverAdapter_cnt_2.METH_wset((tUInt8)7u);
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_display(sim_hdl, this, "s,4", &__str_literal_4, DEF_v__h1919);
  INST_state.METH_write((tUInt8)0u);
}

void MOD_mkTb::RL_complete()
{
  if (!(PORT_RST_N == (tUInt8)0u))
    dollar_finish(sim_hdl, "32", 0u);
}


/* Methods */


/* Reset routines */

void MOD_mkTb::reset_RST_N(tUInt8 ARG_rst_in)
{
  PORT_RST_N = ARG_rst_in;
  INST_test_serverAdapter_s1.reset_RST(ARG_rst_in);
  INST_test_serverAdapter_outDataCore.reset_RST(ARG_rst_in);
  INST_test_serverAdapter_cnt.reset_RST(ARG_rst_in);
  INST_state.reset_RST(ARG_rst_in);
  INST_ad.reset_RST(ARG_rst_in);
}


/* Static handles to reset routines */


/* Functions for the parent module to register its reset fns */


/* Functions to set the elaborated clock id */

void MOD_mkTb::set_clk_0(char const *s)
{
  __clk_handle_0 = bk_get_or_define_clock(sim_hdl, s);
}


/* State dumping routine */
void MOD_mkTb::dump_state(unsigned int indent)
{
  printf("%*s%s:\n", indent, "", inst_name);
  INST_ad.dump_state(indent + 2u);
  INST_state.dump_state(indent + 2u);
  INST_test_memory.dump_state(indent + 2u);
  INST_test_serverAdapter_cnt.dump_state(indent + 2u);
  INST_test_serverAdapter_cnt_1.dump_state(indent + 2u);
  INST_test_serverAdapter_cnt_2.dump_state(indent + 2u);
  INST_test_serverAdapter_cnt_3.dump_state(indent + 2u);
  INST_test_serverAdapter_outDataCore.dump_state(indent + 2u);
  INST_test_serverAdapter_outData_deqCalled.dump_state(indent + 2u);
  INST_test_serverAdapter_outData_enqData.dump_state(indent + 2u);
  INST_test_serverAdapter_outData_outData.dump_state(indent + 2u);
  INST_test_serverAdapter_s1.dump_state(indent + 2u);
  INST_test_serverAdapter_s1_1.dump_state(indent + 2u);
  INST_test_serverAdapter_writeWithResp.dump_state(indent + 2u);
}


/* VCD dumping routines */

unsigned int MOD_mkTb::dump_VCD_defs(unsigned int levels)
{
  vcd_write_scope_start(sim_hdl, inst_name);
  vcd_num = vcd_reserve_ids(sim_hdl, 23u);
  unsigned int num = vcd_num;
  for (unsigned int clk = 0u; clk < bk_num_clocks(sim_hdl); ++clk)
    vcd_add_clock_def(sim_hdl, this, bk_clock_name(sim_hdl, clk), bk_clock_vcd_num(sim_hdl, clk));
  vcd_write_def(sim_hdl, bk_clock_vcd_num(sim_hdl, __clk_handle_0), "CLK", 1u);
  vcd_write_def(sim_hdl, num++, "RST_N", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "b__h1051", 3u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_serverAdapter_cnt_1_whas____d20", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_serverAdapter_cnt_2_whas____d21", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_serverAdapter_cnt_3_whas____d23", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_serverAdapter_s1_0_BIT_0___d51", 1u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "test_serverAdapter_s1___d50", 2u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x2__h1787", 4u);
  vcd_set_clock(sim_hdl, num, __clk_handle_0);
  vcd_write_def(sim_hdl, num++, "x__h653", 4u);
  num = INST_ad.dump_VCD_defs(num);
  num = INST_state.dump_VCD_defs(num);
  num = INST_test_memory.dump_VCD_defs(num);
  num = INST_test_serverAdapter_cnt.dump_VCD_defs(num);
  num = INST_test_serverAdapter_cnt_1.dump_VCD_defs(num);
  num = INST_test_serverAdapter_cnt_2.dump_VCD_defs(num);
  num = INST_test_serverAdapter_cnt_3.dump_VCD_defs(num);
  num = INST_test_serverAdapter_outDataCore.dump_VCD_defs(num);
  num = INST_test_serverAdapter_outData_deqCalled.dump_VCD_defs(num);
  num = INST_test_serverAdapter_outData_enqData.dump_VCD_defs(num);
  num = INST_test_serverAdapter_outData_outData.dump_VCD_defs(num);
  num = INST_test_serverAdapter_s1.dump_VCD_defs(num);
  num = INST_test_serverAdapter_s1_1.dump_VCD_defs(num);
  num = INST_test_serverAdapter_writeWithResp.dump_VCD_defs(num);
  vcd_write_scope_end(sim_hdl);
  return num;
}

void MOD_mkTb::dump_VCD(tVCDDumpType dt, unsigned int levels, MOD_mkTb &backing)
{
  vcd_defs(dt, backing);
  vcd_prims(dt, backing);
}

void MOD_mkTb::vcd_defs(tVCDDumpType dt, MOD_mkTb &backing)
{
  unsigned int num = vcd_num;
  if (dt == VCD_DUMP_XS)
  {
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 3u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 1u);
    vcd_write_x(sim_hdl, num++, 2u);
    vcd_write_x(sim_hdl, num++, 4u);
    vcd_write_x(sim_hdl, num++, 4u);
  }
  else
    if (dt == VCD_DUMP_CHANGES)
    {
      if ((backing.PORT_RST_N) != PORT_RST_N)
      {
	vcd_write_val(sim_hdl, num, PORT_RST_N, 1u);
	backing.PORT_RST_N = PORT_RST_N;
      }
      ++num;
      if ((backing.DEF_b__h1051) != DEF_b__h1051)
      {
	vcd_write_val(sim_hdl, num, DEF_b__h1051, 3u);
	backing.DEF_b__h1051 = DEF_b__h1051;
      }
      ++num;
      if ((backing.DEF_test_serverAdapter_cnt_1_whas____d20) != DEF_test_serverAdapter_cnt_1_whas____d20)
      {
	vcd_write_val(sim_hdl, num, DEF_test_serverAdapter_cnt_1_whas____d20, 1u);
	backing.DEF_test_serverAdapter_cnt_1_whas____d20 = DEF_test_serverAdapter_cnt_1_whas____d20;
      }
      ++num;
      if ((backing.DEF_test_serverAdapter_cnt_2_whas____d21) != DEF_test_serverAdapter_cnt_2_whas____d21)
      {
	vcd_write_val(sim_hdl, num, DEF_test_serverAdapter_cnt_2_whas____d21, 1u);
	backing.DEF_test_serverAdapter_cnt_2_whas____d21 = DEF_test_serverAdapter_cnt_2_whas____d21;
      }
      ++num;
      if ((backing.DEF_test_serverAdapter_cnt_3_whas____d23) != DEF_test_serverAdapter_cnt_3_whas____d23)
      {
	vcd_write_val(sim_hdl, num, DEF_test_serverAdapter_cnt_3_whas____d23, 1u);
	backing.DEF_test_serverAdapter_cnt_3_whas____d23 = DEF_test_serverAdapter_cnt_3_whas____d23;
      }
      ++num;
      if ((backing.DEF_test_serverAdapter_s1_0_BIT_0___d51) != DEF_test_serverAdapter_s1_0_BIT_0___d51)
      {
	vcd_write_val(sim_hdl, num, DEF_test_serverAdapter_s1_0_BIT_0___d51, 1u);
	backing.DEF_test_serverAdapter_s1_0_BIT_0___d51 = DEF_test_serverAdapter_s1_0_BIT_0___d51;
      }
      ++num;
      if ((backing.DEF_test_serverAdapter_s1___d50) != DEF_test_serverAdapter_s1___d50)
      {
	vcd_write_val(sim_hdl, num, DEF_test_serverAdapter_s1___d50, 2u);
	backing.DEF_test_serverAdapter_s1___d50 = DEF_test_serverAdapter_s1___d50;
      }
      ++num;
      if ((backing.DEF_x2__h1787) != DEF_x2__h1787)
      {
	vcd_write_val(sim_hdl, num, DEF_x2__h1787, 4u);
	backing.DEF_x2__h1787 = DEF_x2__h1787;
      }
      ++num;
      if ((backing.DEF_x__h653) != DEF_x__h653)
      {
	vcd_write_val(sim_hdl, num, DEF_x__h653, 4u);
	backing.DEF_x__h653 = DEF_x__h653;
      }
      ++num;
    }
    else
    {
      vcd_write_val(sim_hdl, num++, PORT_RST_N, 1u);
      backing.PORT_RST_N = PORT_RST_N;
      vcd_write_val(sim_hdl, num++, DEF_b__h1051, 3u);
      backing.DEF_b__h1051 = DEF_b__h1051;
      vcd_write_val(sim_hdl, num++, DEF_test_serverAdapter_cnt_1_whas____d20, 1u);
      backing.DEF_test_serverAdapter_cnt_1_whas____d20 = DEF_test_serverAdapter_cnt_1_whas____d20;
      vcd_write_val(sim_hdl, num++, DEF_test_serverAdapter_cnt_2_whas____d21, 1u);
      backing.DEF_test_serverAdapter_cnt_2_whas____d21 = DEF_test_serverAdapter_cnt_2_whas____d21;
      vcd_write_val(sim_hdl, num++, DEF_test_serverAdapter_cnt_3_whas____d23, 1u);
      backing.DEF_test_serverAdapter_cnt_3_whas____d23 = DEF_test_serverAdapter_cnt_3_whas____d23;
      vcd_write_val(sim_hdl, num++, DEF_test_serverAdapter_s1_0_BIT_0___d51, 1u);
      backing.DEF_test_serverAdapter_s1_0_BIT_0___d51 = DEF_test_serverAdapter_s1_0_BIT_0___d51;
      vcd_write_val(sim_hdl, num++, DEF_test_serverAdapter_s1___d50, 2u);
      backing.DEF_test_serverAdapter_s1___d50 = DEF_test_serverAdapter_s1___d50;
      vcd_write_val(sim_hdl, num++, DEF_x2__h1787, 4u);
      backing.DEF_x2__h1787 = DEF_x2__h1787;
      vcd_write_val(sim_hdl, num++, DEF_x__h653, 4u);
      backing.DEF_x__h653 = DEF_x__h653;
    }
}

void MOD_mkTb::vcd_prims(tVCDDumpType dt, MOD_mkTb &backing)
{
  INST_ad.dump_VCD(dt, backing.INST_ad);
  INST_state.dump_VCD(dt, backing.INST_state);
  INST_test_memory.dump_VCD(dt, backing.INST_test_memory);
  INST_test_serverAdapter_cnt.dump_VCD(dt, backing.INST_test_serverAdapter_cnt);
  INST_test_serverAdapter_cnt_1.dump_VCD(dt, backing.INST_test_serverAdapter_cnt_1);
  INST_test_serverAdapter_cnt_2.dump_VCD(dt, backing.INST_test_serverAdapter_cnt_2);
  INST_test_serverAdapter_cnt_3.dump_VCD(dt, backing.INST_test_serverAdapter_cnt_3);
  INST_test_serverAdapter_outDataCore.dump_VCD(dt, backing.INST_test_serverAdapter_outDataCore);
  INST_test_serverAdapter_outData_deqCalled.dump_VCD(dt,
						     backing.INST_test_serverAdapter_outData_deqCalled);
  INST_test_serverAdapter_outData_enqData.dump_VCD(dt,
						   backing.INST_test_serverAdapter_outData_enqData);
  INST_test_serverAdapter_outData_outData.dump_VCD(dt,
						   backing.INST_test_serverAdapter_outData_outData);
  INST_test_serverAdapter_s1.dump_VCD(dt, backing.INST_test_serverAdapter_s1);
  INST_test_serverAdapter_s1_1.dump_VCD(dt, backing.INST_test_serverAdapter_s1_1);
  INST_test_serverAdapter_writeWithResp.dump_VCD(dt, backing.INST_test_serverAdapter_writeWithResp);
}
