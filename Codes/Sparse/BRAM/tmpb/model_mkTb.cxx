/*
 * Generated by Bluespec Compiler, version 2014.05.C (build 33930, 2014-05-28)
 * 
 * On Mon Apr 30 21:47:05 IST 2018
 * 
 */
#include "bluesim_primitives.h"
#include "model_mkTb.h"

#include <cstdlib>
#include <time.h>
#include "bluesim_kernel_api.h"
#include "bs_vcd.h"
#include "bs_reset.h"


/* Constructor */
MODEL_mkTb::MODEL_mkTb()
{
  mkTb_instance = NULL;
}

/* Function for creating a new model */
void * new_MODEL_mkTb()
{
  MODEL_mkTb *model = new MODEL_mkTb();
  return (void *)(model);
}

/* Schedule functions */

static void schedule_posedge_CLK(tSimStateHdl simHdl, void *instance_ptr)
       {
	 MOD_mkTb &INST_top = *((MOD_mkTb *)(instance_ptr));
	 tUInt8 DEF_INST_top_DEF_NOT_state_1___d62;
	 tUInt8 DEF_INST_top_DEF_test_serverAdapter_s1_0_BIT_1___d55;
	 tUInt8 DEF_INST_top_DEF_state__h2040;
	 tUInt8 DEF_INST_top_DEF_test_serverAdapter_outDataCore_notFull____d53;
	 tUInt8 DEF_INST_top_DEF_test_serverAdapter_outDataCore_notEmpty____d2;
	 tUInt8 DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notFull____d9;
	 tUInt8 DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notEmpty____d1;
	 tUInt8 DEF_INST_top_DEF_test_serverAdapter_outData_enqData_whas____d6;
	 tUInt8 DEF_INST_top_DEF_test_serverAdapter_outData_deqCalled_whas____d10;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_setFirstCore;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_setFirstCore;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_setFirstEnq;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_setFirstEnq;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_enqOnly;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_enqOnly;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_deqOnly;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_deqOnly;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_enqAndDeq;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_enqAndDeq;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_cnt_finalAdd;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_cnt_finalAdd;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_s1__dreg_update;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_s1__dreg_update;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_stageReadResponseAlways;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_stageReadResponseAlways;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_moveToOutFIFO;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_moveToOutFIFO;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_overRun;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_overRun;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_sendRequest;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_sendRequest;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_receive;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_receive;
	 tUInt8 DEF_INST_top_DEF_CAN_FIRE_RL_complete;
	 tUInt8 DEF_INST_top_DEF_WILL_FIRE_RL_complete;
	 INST_top.DEF_x2__h1787 = INST_top.INST_ad.METH_read();
	 DEF_INST_top_DEF_state__h2040 = INST_top.INST_state.METH_read();
	 DEF_INST_top_DEF_NOT_state_1___d62 = !DEF_INST_top_DEF_state__h2040;
	 DEF_INST_top_DEF_CAN_FIRE_RL_complete = (INST_top.DEF_x2__h1787) == (tUInt8)15u && DEF_INST_top_DEF_NOT_state_1___d62;
	 DEF_INST_top_DEF_WILL_FIRE_RL_complete = DEF_INST_top_DEF_CAN_FIRE_RL_complete;
	 INST_top.DEF_b__h1051 = INST_top.INST_test_serverAdapter_cnt.METH_read();
	 DEF_INST_top_DEF_CAN_FIRE_RL_sendRequest = primSLT8(1u,
							     3u,
							     (tUInt8)(INST_top.DEF_b__h1051),
							     3u,
							     (tUInt8)3u) && DEF_INST_top_DEF_NOT_state_1___d62;
	 DEF_INST_top_DEF_WILL_FIRE_RL_sendRequest = DEF_INST_top_DEF_CAN_FIRE_RL_sendRequest;
	 INST_top.DEF_test_serverAdapter_s1___d50 = INST_top.INST_test_serverAdapter_s1.METH_read();
	 DEF_INST_top_DEF_test_serverAdapter_outDataCore_notFull____d53 = INST_top.INST_test_serverAdapter_outDataCore.METH_notFull();
	 DEF_INST_top_DEF_test_serverAdapter_s1_0_BIT_1___d55 = (tUInt8)((INST_top.DEF_test_serverAdapter_s1___d50) >> 1u);
	 INST_top.DEF_test_serverAdapter_s1_0_BIT_0___d51 = (tUInt8)((tUInt8)1u & (INST_top.DEF_test_serverAdapter_s1___d50));
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_moveToOutFIFO = (!(INST_top.DEF_test_serverAdapter_s1_0_BIT_0___d51) || DEF_INST_top_DEF_test_serverAdapter_outDataCore_notFull____d53) && DEF_INST_top_DEF_test_serverAdapter_s1_0_BIT_1___d55;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_moveToOutFIFO = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_moveToOutFIFO;
	 DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notEmpty____d1 = INST_top.INST_test_serverAdapter_outDataCore.METH_i_notEmpty();
	 DEF_INST_top_DEF_test_serverAdapter_outDataCore_notEmpty____d2 = INST_top.INST_test_serverAdapter_outDataCore.METH_notEmpty();
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_setFirstCore = DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notEmpty____d1 && DEF_INST_top_DEF_test_serverAdapter_outDataCore_notEmpty____d2;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_setFirstCore = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_setFirstCore;
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_overRun = DEF_INST_top_DEF_test_serverAdapter_s1_0_BIT_1___d55 && !DEF_INST_top_DEF_test_serverAdapter_outDataCore_notFull____d53;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_overRun = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_overRun;
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_s1__dreg_update = (tUInt8)1u;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_s1__dreg_update = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_s1__dreg_update;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_complete)
	   INST_top.RL_complete();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_sendRequest)
	   INST_top.RL_sendRequest();
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_stageReadResponseAlways = INST_top.INST_test_serverAdapter_writeWithResp.METH_whas();
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_stageReadResponseAlways = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_stageReadResponseAlways;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_moveToOutFIFO)
	   INST_top.RL_test_serverAdapter_moveToOutFIFO();
	 DEF_INST_top_DEF_test_serverAdapter_outData_enqData_whas____d6 = INST_top.INST_test_serverAdapter_outData_enqData.METH_whas();
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_setFirstEnq = !DEF_INST_top_DEF_test_serverAdapter_outDataCore_notEmpty____d2 && DEF_INST_top_DEF_test_serverAdapter_outData_enqData_whas____d6;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_setFirstEnq = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_setFirstEnq;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_setFirstCore)
	   INST_top.RL_test_serverAdapter_outData_setFirstCore();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_setFirstEnq)
	   INST_top.RL_test_serverAdapter_outData_setFirstEnq();
	 DEF_INST_top_DEF_CAN_FIRE_RL_receive = (((DEF_INST_top_DEF_test_serverAdapter_outDataCore_notEmpty____d2 || DEF_INST_top_DEF_test_serverAdapter_outData_enqData_whas____d6) && INST_top.INST_test_serverAdapter_outData_outData.METH_whas()) && DEF_INST_top_DEF_state__h2040) && !(DEF_INST_top_DEF_CAN_FIRE_RL_complete || DEF_INST_top_DEF_CAN_FIRE_RL_sendRequest);
	 DEF_INST_top_DEF_WILL_FIRE_RL_receive = DEF_INST_top_DEF_CAN_FIRE_RL_receive;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_overRun)
	   INST_top.RL_test_serverAdapter_overRun();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_receive)
	   INST_top.RL_receive();
	 DEF_INST_top_DEF_test_serverAdapter_outData_deqCalled_whas____d10 = INST_top.INST_test_serverAdapter_outData_deqCalled.METH_whas();
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_deqOnly = (DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notEmpty____d1 && (DEF_INST_top_DEF_test_serverAdapter_outData_deqCalled_whas____d10 && !DEF_INST_top_DEF_test_serverAdapter_outData_enqData_whas____d6)) && !DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_setFirstEnq;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_deqOnly = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_deqOnly;
	 DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notFull____d9 = INST_top.INST_test_serverAdapter_outDataCore.METH_i_notFull();
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_enqAndDeq = ((DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notEmpty____d1 && DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notFull____d9) && (DEF_INST_top_DEF_test_serverAdapter_outData_deqCalled_whas____d10 && DEF_INST_top_DEF_test_serverAdapter_outData_enqData_whas____d6)) && !(DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_overRun || DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_setFirstEnq);
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_enqAndDeq = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_enqAndDeq;
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_enqOnly = (DEF_INST_top_DEF_test_serverAdapter_outDataCore_i_notFull____d9 && (!DEF_INST_top_DEF_test_serverAdapter_outData_deqCalled_whas____d10 && DEF_INST_top_DEF_test_serverAdapter_outData_enqData_whas____d6)) && !DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_overRun;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_enqOnly = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_outData_enqOnly;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_deqOnly)
	   INST_top.RL_test_serverAdapter_outData_deqOnly();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_enqAndDeq)
	   INST_top.RL_test_serverAdapter_outData_enqAndDeq();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_outData_enqOnly)
	   INST_top.RL_test_serverAdapter_outData_enqOnly();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_stageReadResponseAlways)
	   INST_top.RL_test_serverAdapter_stageReadResponseAlways();
	 INST_top.DEF_test_serverAdapter_cnt_3_whas____d23 = INST_top.INST_test_serverAdapter_cnt_3.METH_whas();
	 INST_top.DEF_test_serverAdapter_cnt_2_whas____d21 = INST_top.INST_test_serverAdapter_cnt_2.METH_whas();
	 INST_top.DEF_test_serverAdapter_cnt_1_whas____d20 = INST_top.INST_test_serverAdapter_cnt_1.METH_whas();
	 DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_cnt_finalAdd = (INST_top.DEF_test_serverAdapter_cnt_1_whas____d20 || INST_top.DEF_test_serverAdapter_cnt_2_whas____d21) || INST_top.DEF_test_serverAdapter_cnt_3_whas____d23;
	 DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_cnt_finalAdd = DEF_INST_top_DEF_CAN_FIRE_RL_test_serverAdapter_cnt_finalAdd;
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_cnt_finalAdd)
	   INST_top.RL_test_serverAdapter_cnt_finalAdd();
	 if (DEF_INST_top_DEF_WILL_FIRE_RL_test_serverAdapter_s1__dreg_update)
	   INST_top.RL_test_serverAdapter_s1__dreg_update();
	 INST_top.INST_test_serverAdapter_s1_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_test_serverAdapter_writeWithResp.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_test_serverAdapter_cnt_3.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_test_serverAdapter_cnt_2.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_test_serverAdapter_cnt_1.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_test_serverAdapter_outData_deqCalled.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_test_serverAdapter_outData_outData.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_test_serverAdapter_outData_enqData.clk((tUInt8)1u, (tUInt8)1u);
	 INST_top.INST_test_memory.clk((tUInt8)1u, (tUInt8)1u);
	 if (do_reset_ticks(simHdl))
	 {
	   INST_top.INST_state.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_ad.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_test_serverAdapter_outDataCore.rst_tick_clk((tUInt8)1u);
	   INST_top.INST_test_serverAdapter_cnt.rst_tick__clk__1((tUInt8)1u);
	   INST_top.INST_test_serverAdapter_s1.rst_tick__clk__1((tUInt8)1u);
	 }
       };

/* Model creation/destruction functions */

void MODEL_mkTb::create_model(tSimStateHdl simHdl, bool master)
{
  sim_hdl = simHdl;
  init_reset_request_counters(sim_hdl);
  mkTb_instance = new MOD_mkTb(sim_hdl, "top", NULL);
  bk_get_or_define_clock(sim_hdl, "CLK");
  if (master)
  {
    bk_alter_clock(sim_hdl, bk_get_clock_by_name(sim_hdl, "CLK"), CLK_LOW, false, 0llu, 5llu, 5llu);
    bk_use_default_reset(sim_hdl);
  }
  bk_set_clock_event_fn(sim_hdl,
			bk_get_clock_by_name(sim_hdl, "CLK"),
			schedule_posedge_CLK,
			NULL,
			(tEdgeDirection)(POSEDGE));
  (mkTb_instance->INST_test_memory.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_outDataCore.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_outData_enqData.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_outData_outData.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_outData_deqCalled.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_cnt_1.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_cnt_2.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_cnt_3.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_writeWithResp.set_clk_0)("CLK");
  (mkTb_instance->INST_test_serverAdapter_s1_1.set_clk_0)("CLK");
  (mkTb_instance->set_clk_0)("CLK");
}
void MODEL_mkTb::destroy_model()
{
  delete mkTb_instance;
  mkTb_instance = NULL;
}
void MODEL_mkTb::reset_model(bool asserted)
{
  (mkTb_instance->reset_RST_N)(asserted ? (tUInt8)0u : (tUInt8)1u);
}
void * MODEL_mkTb::get_instance()
{
  return mkTb_instance;
}

/* Fill in version numbers */
void MODEL_mkTb::get_version(unsigned int *year,
			     unsigned int *month,
			     char const **annotation,
			     char const **build)
{
  *year = 2014u;
  *month = 5u;
  *annotation = "C";
  *build = "33930";
}

/* Get the model creation time */
time_t MODEL_mkTb::get_creation_time()
{
  
  /* Mon Apr 30 16:17:05 UTC 2018 */
  return 1525105025llu;
}

/* Control run-time licensing */
tUInt64 MODEL_mkTb::skip_license_check()
{
  return 0llu;
}

/* State dumping function */
void MODEL_mkTb::dump_state()
{
  (mkTb_instance->dump_state)(0u);
}

/* VCD dumping functions */
MOD_mkTb & mkTb_backing(tSimStateHdl simHdl)
{
  static MOD_mkTb *instance = NULL;
  if (instance == NULL)
  {
    vcd_set_backing_instance(simHdl, true);
    instance = new MOD_mkTb(simHdl, "top", NULL);
    vcd_set_backing_instance(simHdl, false);
  }
  return *instance;
}
void MODEL_mkTb::dump_VCD_defs()
{
  (mkTb_instance->dump_VCD_defs)(vcd_depth(sim_hdl));
}
void MODEL_mkTb::dump_VCD(tVCDDumpType dt)
{
  (mkTb_instance->dump_VCD)(dt, vcd_depth(sim_hdl), mkTb_backing(sim_hdl));
}
